@model IEnumerable<DrawingTheme.Models.tblComponent>
@{
    ViewBag.Title = "DrawShape";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int i = 0;
    //Layout = null;
}


<style>
    #foo {
        bottom: 0;
        right: 0;
    }
    .badge-success:empty {
        display: none !important;
    }
    .badge-warning:empty {
        display: none !important;
    }
    #Area:hover {
        color: black !important;
    }
    #DryArea:hover {
        color: black !important;
    }
    #Hedge:hover {
        color: black !important;
    }
    #GetWet:hover {
        color: black !important;
    }
</style>
<div class="row mb-2">
    <div class="container-fluid bd-example">
        <nav class="col-md-12  navbar navbar-expand-lg navbar-light light-primary-bg" style="display:block !important">

            <input type="text" name="OrderId" id="OrderId" value="" hidden="">
            <input type="text" name="ObjUniqueId" id="ObjUniqueId" value="" hidden="">
            <input type="text" name="VBCircle" id="VBCircle" value="" hidden="">
            <input type="text" name="SprinklerCount" id="SprinklerCount" value="0" hidden>


            <button id="Area" class="btn btn-success ml-2 mr-2 " onclick="SaveData(4)" data-radius="30" data-width="100" data-height="40" data-angle="180" data-rotation="45">@Resources.Lawn</button>
            <button id="DryArea" class="btn  mr-2 text-white" style="background-color: #998a5c; " onclick="SaveData(5)" data-radius="30" data-width="100" data-height="40" data-angle="180" data-rotation="45">@Resources.DryArea</button>
            <button id="Hedge" class="btn  mr-2 text-white" style="background-color: #D2BFFF; " onclick="SaveData(6)" data-radius="30" data-width="100" data-height="40" data-angle="180" data-rotation="45">@Resources.Hedge</button>
            <button id="GetWet" class="btn  mr-2 text-white" style="background-color: rgba(111, 187, 211, .8); " onclick="SaveData(9)" data-radius="30" data-width="100" data-height="40" data-angle="180" data-rotation="45">@Resources.GetWet </button>
            @*<button id="" class="btn  mr-2 text-white" style="background-color: rgba(111, 187, 211, .8); " onclick="SprinklerCount()" >SprinklerCount</button>*@

           
            <form style="float:right" role="form" id="payment-form" method="POST" action="@Url.Action("PaymentWithPaypal","PayPal")">
                <span class="badge badge-warning  mr-2" style="font-size: 100% !important; background-color: #8ec746 !important; ">
                    <label id="OrderName" style="padding-top: 4% !important;"></label>
                </span>
                    <span class="badge badge-warning  mr-2" style="font-size: 100% !important; background-color: #333333 !important; ">
                         <label id="TotalAmount" style="padding-top: 4% !important;"> 0</label> €
                    </span>
                    <input type="text" id="TotalAmountInput" name="amount" value="" hidden />
                    <button class="btn btn-danger " type="button" id="save"><i class="fa fa-save mr-2"></i>@Resources.SaveasPDF</button>
                    <button class="btn btn-secondary " type="button" id="ProceedToAccesoires"><i class="fa fa-forward  mr-2"></i>@Resources.Proceed</button>
                    <button class="btn btn-info mr-2" type="submit" hidden><i class="fa fa-paypal mr-2"></i>@Resources.PlaceOrder</button>
            </form>
           
        </nav>
    </div>

</div>

<div class="row">
    <div class="container-fluid   col-md-1">
        <div class="card">
            @*@foreach (DrawingTheme.Models.tblCategory item in ViewBag.Category)
            {

            <div class="dropdown " id="btn_@item.Code" style="padding:10px;">
                @foreach (DrawingTheme.Models.tblSubCategory item1 in ViewBag.SubCategory)
                {
                    if (@item1.CategoryID == item.CategoryID)
                    {
                        <a  class="btn btn-outline-secondary  @item.Code@item1.IrrigationWiringMaxStation.ToString().Replace(",",".")" data-toggle="dropdown" title="@item.CategoryName" id="@item.Code.ToString().Replace(",",".")" data-SubCatId="@item1.SubcategoryID.ToString().Replace(",",".")" data-Name="@item1.SubcategoryName.ToString().Replace(",",".")" data-radius="@item1.ThrowDistanceMax.ToString().Replace(",",".")" data-width="@item1.ThrowWidth.ToString().Replace(",",".")" data-height="@item1.ThrowHeight.ToString().Replace(",",".")" data-angle="@item1.MaxAngle.ToString().Replace(",",".")" data-rotation="@item1.MinAngle.ToString().Replace(",",".")" data-IrrigationCircles="@item1.valveboxcircle.ToString().Replace(",",".")" data-Filter="@item1.valveboxFilter" data-DrinkingWater="@item1.drinkingwatersource.ToString().Replace(",",".")" data-WellWater="@item1.wellwatersource" data-RainWater="@item1.rainwatersource.ToString().Replace(",",".")" data-Station="@item1.IrrigationComputermaxstation.ToString().Replace(",",".")" data-Indoor="@item1.IrrigationComputerindoor.ToString().Replace(",",".")" data-Outdoor="@item1.IrrigationComputeroutdoor.ToString().Replace(",",".")" data-SP="@item1.IrrigationComputeroutdoor.ToString().Replace(",",".")" href="javascript:void(0)">
                            <img src="@item.Component" style="width:80%" />
                        </a>
                        break;
                    }
                }

            </div>
            }*@
            @foreach (DrawingTheme.Models.tblCategory item in ViewBag.Category)
            {

            <div class="dropdown " id="btn_@item.Code" style="padding:10px;">
               
                <button type="button" class="btn btn-outline-secondary " data-toggle="dropdown" title="@item.CategoryName">
                    <img src="@item.Component" style="width:80%" />
                </button>
                <div class="dropdown-menu" style="overflow: scroll;  will-change: transform; position: absolute; transform: translate3d(0px, 34px, 0px); top: 0px; left: 0px;" x-placement="bottom-start">

                    @foreach (DrawingTheme.Models.tblSubCategory item1 in ViewBag.SubCategory)
                    {
                        if (@item1.CategoryID == item.CategoryID)
                        {
                            <a class="dropdown-item @item.Code@item1.IrrigationWiringMaxStation.ToString().Replace(",",".")" id="@item.Code.ToString().Replace(",",".")" data-SubCatId="@item1.SubcategoryID.ToString().Replace(",",".")" data-Name="@item1.SubcategoryName.ToString().Replace(",",".")" data-radius="@item1.ThrowDistanceMax.ToString().Replace(",",".")" data-width="@item1.ThrowWidth.ToString().Replace(",",".")" data-height="@item1.ThrowHeight.ToString().Replace(",",".")" data-angle="@item1.MaxAngle.ToString().Replace(",",".")" data-rotation="@item1.MinAngle.ToString().Replace(",",".")" data-IrrigationCircles="@item1.valveboxcircle.ToString().Replace(",",".")" data-Filter="@item1.valveboxFilter" data-DrinkingWater="@item1.drinkingwatersource.ToString().Replace(",",".")" data-WellWater="@item1.wellwatersource" data-RainWater="@item1.rainwatersource.ToString().Replace(",",".")" data-Station="@item1.IrrigationComputermaxstation.ToString().Replace(",",".")" data-Indoor="@item1.IrrigationComputerindoor.ToString().Replace(",",".")" data-Outdoor="@item1.IrrigationComputeroutdoor.ToString().Replace(",",".")" data-SP="@item1.IrrigationComputeroutdoor.ToString().Replace(",",".")" href="javascript:void(0)">
                                @item1.SubcategoryName
                            </a>
                        }


                    }

                </div>

            </div>
            }
            <div class="dropdown " @*id="btn_@item.Code"*@ style="padding:10px;">
                <button type="button" class="btn btn-outline-secondary " data-toggle="dropdown" title="Image Upload" onclick="open_file()">
                    <img src="~/assets/images/ecommerce/uploadImage.jpg" style="width:80%" />
                </button>
                

            </div>
        </div>
        @*<div class="navigation navbar navbar-light justify-content-center px-3 px-lg-2 py-2 py-md-3  ver-menu">

            <ul class="nav navbar-nav flex-row flex-lg-column flex-grow-1 justify-content-start align-items-center py-2 py-lg-0">

                @foreach (DrawingTheme.Models.tblCategory item in ViewBag.Category)
                {

                    <li class="collapsed">
                        <a class="m-link" data-toggle="collapse" data-target="#@item.Code" href="#">
                            <i class="" style="margin-left:4%"></i>
                            <span>@item.CategoryName</span><span class="arrow fa fa-angle-down ml-auto text-right"></span>
                        </a>
                        <ul class="sub-menu collapse" id="@item.Code">
                            @foreach (DrawingTheme.Models.tblSubCategory item1 in ViewBag.SubCategory)
                            {
                                if (@item1.CategoryID == item.CategoryID)
                                {






                                    <li>
                                        <a id="@item.Code" data-SubCatId="@item1.SubcategoryID" data-Name="@item1.SubcategoryName" data-radius="@item1.ThrowDistanceMax" data-width="@item1.ThrowWidth" data-height="@item1.ThrowHeight" data-angle="@item1.MaxAngle" data-rotation="@item1.MinAngle" data-IrrigationCircles="@item1.valveboxcircle" data-Filter="@item1.valveboxFilter" data-DrinkingWater="@item1.drinkingwatersource" data-WellWater="@item1.wellwatersource" data-RainWater="@item1.rainwatersource" data-Station="@item1.IrrigationComputermaxstation" data-Indoor="@item1.IrrigationComputerindoor" data-Outdoor="@item1.IrrigationComputeroutdoor" data-SP="@item1.IrrigationComputeroutdoor" href="javascript:void(0)">
                                            @item1.SubcategoryName
                                        </a>
                                    </li>


                                }
                            }
                        </ul>
                    </li>
}



            </ul>

        </div>*@




    </div>
    <div class="col-md-9">
        <div class="body d-flex profile-page">
            <div class="card">
                <div  id="container" data-options="scaleMode:proportionalInside" style="border:1px solid">
                </div>
                <div id="foo" class='buttons mt-2 mb-2'>

                    <img class="mr-2" id='reset' src="~/assets/images/ecommerce/ResetZoom.png" style="width:2%;float:right" />
                    <img class="mr-2" id='stage2ZoomOut' src="~/assets/images/ecommerce/ZoomOut.png" style="width:2%;float:right" />

                    <img class="mr-2" id='stage2ZoomIn' src="~/assets/images/ecommerce/ZoomIN.png" style="width:2%;float:right" />
                    <img class="mr-2" id="UndoCanvas" src="~/assets/images/ecommerce/undo.png" style="width:2%;float:right" />
                    <img class="mr-2" onclick="RemoveAll()" src="~/assets/images/ecommerce/Reset.png" style="width:2%;float:right" />

                </div>
            </div>
        </div>

    </div>
    <div class="col-md-2">
        <div class="card free-card text-center">
            <div class="btn btn-lg" style=" background-color: #333333 !important; color: white;">
                <h4>@Resources.Property </h4>
            </div>
            <div class="card-body">
                <h6 id="SName" class="badge-success bg-success text-white" style="display: inline-block; padding: 0.25em 0.4em; font-weight: 700;  text-align: center; border-radius: 0.25rem; transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;"></h6><br />
                <h6 hidden id="SubCatId"></h6>
                <div id="RSPD" class="RSPD" style="display:none;">
                    <input class="form-control" type="text" id="SId" hidden name="name" value="" />
                    <label>@Resources.SprinklerType</label>
                    <select class="form-control" id="SprinklerTypeDropID">
                        @foreach (DrawingTheme.Models.tblSubCategory item in ViewBag.Sprinkler)
                        {
                            <option value="@item.SubcategoryName.ToString().Replace(",",".")" data-SubCatId="@item.SubcategoryID.ToString().Replace(",",".")" data-Name="@item.SubcategoryName.ToString().Replace(",",".")" data-radius="@item.ThrowDistanceMax.ToString().Replace(",",".")" data-width="@item.ThrowWidth.ToString().Replace(",",".")" data-height="@item.ThrowHeight.ToString().Replace(",",".")" data-angle="@item.MaxAngle.ToString().Replace(",",".")" data-rotation="@item.MinAngle.ToString().Replace(",",".")" data-IrrigationCircles="@item.valveboxcircle.ToString().Replace(",",".")" data-Filter="@item.valveboxFilter.ToString().Replace(",",".")" data-DrinkingWater="@item.drinkingwatersource.ToString().Replace(",",".")" data-WellWater="@item.wellwatersource.ToString().Replace(",",".")" data-RainWater="@item.rainwatersource.ToString().Replace(",",".")" data-Station="@item.IrrigationComputermaxstation.ToString().Replace(",",".")" data-Indoor="@item.IrrigationComputerindoor.ToString().Replace(",",".")" data-Outdoor="@item.IrrigationComputeroutdoor.ToString().Replace(",",".")" data-SP="@item.IrrigationComputeroutdoor.ToString().Replace(",",".")">@item.SubcategoryName</option>
                        }
                    </select>
                    <label>@Resources.Radius</label>
                    <input class="form-control" type="number" id="SRadius" onchange="SetS(this,1)" name="name" value="" />
                    <label>@Resources.StartAngle</label>
                    <input class="form-control" type="number" id="StartAngle" onchange="SetS(this,2)" name="name" value="" />
                    <label>@Resources.Angle</label>
                    <input class="form-control" type="number" id="SAngle" onchange="SetS(this,3)" name="name" value="" />
                    @*<button class="btn btn-sm btn-secondary fa fa-lock" id="BtnEndsprinkler" style="display:none;">End sprinkler</button>*@

                </div>
                <div id="SSPD" class="SSPD" style="display:none;">
                    <input class="form-control" type="text" id="SSId" hidden name="name" value="" />
                    <label>@Resources.Width</label>
                    <input class="form-control" type="number" id="SSWidth" onchange="SetS(this,4)" name="name" value="" disabled />
                    <label>@Resources.Height</label>
                    <input class="form-control" type="number" id="SSHeight" onchange="SetS(this,5)" name="name" value="" disabled />
                    @*<button class="btn btn-sm btn-secondary fa fa-lock" id="BtnEndRectangularsprinkler" style="display:none;">End rectangular sprinkler</button>*@
                </div>
                <div id="VBPD" class="VBPD" style="display:none;">
                    <input class="form-control" type="text" id="VBId" hidden name="name" value="" />
                    <label id="VBF" style="display:none;">@Resources.Filterincluded</label>
                    <label id="VBDW" style="display:none;">@Resources.fordrinkingwatersource</label>
                    <label id="VBWW" style="display:none;">@Resources.forwellwatersource</label>
                    <label id="VBRW" style="display:none;">@Resources.forrainwatersource</label>
                    @*<button class="btn btn-sm btn-secondary fa fa-lock" id="EndVB" style="display:none;">End Valve box</button>*@
                </div>
                <div id="ICPD" class="ICPD" style="display:none;">
                    <input class="form-control" type="text" id="ICId" hidden name="name" value="" />
                    <label id="ICS">Filter included</label>
                    <label id="ICID" style="display:none;">@Resources.Indoor</label>
                    <label id="ICOD" style="display:none;">@Resources.outdoor</label>
                    <label id="ICSP" style="display:none;">@Resources.Smarphone</label>
                    @*<button class="btn btn-sm btn-secondary fa fa-lock" id="EndIC" style="display:none;">End Irrigation computer</button>*@
                </div>
                <div id="TapPD" class="TapPD" style="display:none;">
                    <input class="form-control" type="text" id="TapId" hidden name="name" value="" />
                    <select id="TapSelect" class="form-control" onchange="SetS(this,6)">
                        <option value="70">@Resources.drinkingwatersource</option>
                        <option value="71">@Resources.wellwatersource</option>
                        <option value="72">@Resources.rainwatersource</option>
                    </select>
                    @*<button class="btn btn-sm btn-secondary fa fa-lock" id="EndTap" style="display:none;">End Tap</button>*@
                </div>
                <div id="IWPD" class="IWPD" style="display:none;">
                    <input class="form-control" type="text" id="IWId" hidden name="name" value="" />
                    <label>@Resources.Totallength: </label>
                    <input class="form-control" type="number" id="IWL" name="name" value="0" disabled />
                    @*<button class="btn btn-sm btn-secondary fa fa-lock" id="EndIW" >End Irrigation wiring</button>*@
                </div>
                <div id="PEPD" class="PEPD" style="display:none;">
                    <input class="form-control" type="text" id="PEId" hidden name="name" value="" />
                    <label>@Resources.Totallength: </label>
                    <input class="form-control" type="number" id="PEL" name="name" value="0" disabled />
                    @*<button class="btn btn-sm btn-secondary fa fa-lock" id="EndPE" >End PE Pipeline</button>*@
                </div>
                @*<button class="btn btn-warning btn-icon btn-icon-mini btn-round" onclick="open_file()"><i class="fa fa-camera" aria-hidden="true"></i></button>*@
                <input type="file" class="" id="file_input" accept="image/*" name="name" value="" hidden>
                <div id="DivImageOpacityValue" class="DivImageOpacityValue" style="display:none;">
                    <label>Image opacity</label>
                    <input type="range" class="form-control" id="ImageOpacityValue" min="10" max="100" value="100">
                    @*<button class="btn btn-sm btn-secondary fa fa-lock" id="EndImageOpacity">End Image</button>*@
                </div>

                @*<button class="btn btn-danger btn-sm text-center mt-1" id="DeleteObj" style="display:none;"><i class="fa fa-trash mr-1"></i>Delete</button>
        <button class="btn btn-info btn-sm text-center mt-1" id="CancleDeleteObj" style="display:none;"><i class="fa fa-close mr-1"></i>Cancel</button>*@
                <button class="btn btn-sm btn-secondary btn-sm text-center mt-1 fa fa-lock  mr-1 RSPD" id="BtnEndsprinkler" style="display: none; font-size: 20px !important;"></button>
                    <button class="btn btn-sm btn-secondary btn-sm text-center mt-1 fa fa-lock  mr-1 SSPD" id="BtnEndRectangularsprinkler" style="display: none; font-size: 20px !important;"></button>
                    <button class="btn btn-sm btn-secondary btn-sm text-center mt-1 fa fa-lock  mr-1 VBPD" id="EndVB" style="display: none; font-size: 20px !important;"></button>
                    <button class="btn btn-sm btn-secondary btn-sm text-center mt-1 fa fa-lock  mr-1 ICPD" id="EndIC" style="display: none; font-size: 20px !important;"></button>
                    <button class="btn btn-sm btn-secondary btn-sm text-center mt-1 fa fa-lock  mr-1 TapPD" id="EndTap" style="display: none; font-size: 20px !important;"></button>
                    <button class="btn btn-sm btn-secondary btn-sm text-center mt-1 fa fa-lock  mr-1 IWPD" id="EndIW" style="display: none; font-size: 20px !important;"></button>
                    <button class="btn btn-sm btn-secondary btn-sm text-center mt-1 fa fa-lock  mr-1 PEPD" id="EndPE" style="display: none; font-size: 20px !important;"></button>
                    <button class="btn btn-sm btn-secondary btn-sm text-center mt-1 fa fa-lock  mr-1 DivImageOpacityValue" id="EndImageOpacity" style="display: none; font-size: 20px !important;"></button>
                <button class="btn btn-danger btn-sm text-center mt-1" id="DeleteObj" style="display:none;"><i class="fa fa-trash mr-1"></i></button>
                <button class="btn btn-info btn-sm text-center mt-1" id="CancleDeleteObj" style="display:none;"><i class="fa fa-close mr-1"></i></button>
                @*<button class="btn btn-danger text-center mt-1"  id="UndoCanvas"><i class="fa fa-undo mr-1"></i>Undo</button>*@
            </div>
        </div>
       
    </div>
    </div>




<div class="modal fade" id="addcontact" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog " role="document">

        <div class="modal-content">
            <div class="modal-header">
                <h4 class="title" id="defaultModalLabel">@Resources.Enterordername</h4>
            </div>
            <div class="modal-body">

                <div class="row clearfix">
                    <div class="col-12">
                        <div class="form-group">
                            <input type="text" class="form-control" id="ModalName" name="Name" placeholder="@Resources.Enterordername" required>
                            <h6 id="OrderError" style="color:red; display:none">*@Resources.Enterordername</h6>
                        </div>
                    </div>


                </div>

            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" id="SaveOrder">@Resources.SaveChanges</button>
            </div>
        </div>
    </div>
</div>


@*<script src="https://unpkg.com/konva@8.3.14/konva.min.js"></script>*@
<script src="https://unpkg.com/konva@8.4.2/konva.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.debug.js" integrity="sha384-NaWTHo/8YCBYJ59830LTz/P4aQZK1sS0SneOgAvhsIl3zBu8r9RevNg5lHCHAuQ/" crossorigin="anonymous"></script>
<script src="~/assets/js/jquery-3.2.1.min.js"></script>
<script>
    function open_file() {
        document.getElementById('file_input').click();
    }


    function SaveData(id) {
        ComponentId = id;
        OrderId = $("#OrderId").val();

        var model = {
            ComponentId: ComponentId,
            OrderId: OrderId,
        };

        $.ajax({
            type: "POST",
            url: "@Url.Action("AddOrderDetails", "Customer")",
            data: JSON.stringify(model),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (r) {
                $("#TotalAmount").text(r);
                $("#TotalAmountInput").val(r);
            }
        });

    }


    $(document).on("click", "#SaveOrder", function () {

        var Name = $("#ModalName").val();

        var model = {
            Name: Name,
        };
        if (Name == "" || Name == null) {
            $("#OrderError").fadeIn();
        }
        else {

            $("#OrderError").fadeOut();

            $.ajax({
                type: "POST",
                url: "@Url.Action("AjaxAddOrder", "Customer")",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    $("#OrderId").val(r.ID);
                    $("#OrderName").text(r.Name);
                    $("#addcontact").modal('toggle');
                }
            });
        }

    });


    $(document).ready(function () {

        //$("#addcontact").modal('toggle');
        //$('#addcontact').modal({ backdrop: 'static', keyboard: false })

        $("#btnChangeImage").click();
        ChangeImage();
        $("#SideBAr").addClass("sidebar-mini");
        $("#addcontact").modal('toggle');
        console.log($(".IW12"));
        //$(".IW12").prop('disabled', true);
        //$(".IW12").off("click");

    });

    var width = 1058;
    var height = 500;

        var isDraw = false;
        var isFirst = false;
        var isFinished = false;
        var isFirstMouseMove = true;
        var isStartLine = true;
        var isOverOnStarting = false;
        var isInArea = false;
        var isOutArea = false;
        var poly = null;
        var rect =  null;
        var Srect =  null;
        const Points = [];
        const StartRect = [];
        var Name = 1;
        var SRName = 1;
        var TextId = 1;
        var Rect1;
        var PolyName = 1;
        var TapName = 1;
        var SystemName = 1;
        var ValveBoxName = 1;
        var UndoArray = [];
        var SprinklerName=1;
        var RectangularSprinklerName=1;
        var id = "";
        var CurrentObjName = "Line1";
        var CurrentObjId = "";
        var OldCurrentObjId = "";
        var FillCirFirstTime = true;
        var EndSprinkler = true;
        var CurretSprinkler = "";
        var CurretRSprinkler = "";
        var CurretRectangularSprinkler = "";
        var CurretIC = "";
    var CurretTap = "";
    var CurretVB = "";
        var CountnueRotate = true;
    let zoomStep = 0.1;
    let scale2 = 1;


        const Group = new Konva.Group();
        var stage = new Konva.Stage({
            container: 'container',
        width: width,
        height: height,
      });
    var img = new Image();
    img.src = "/assets/images/ecommerce/graph.jpg";

    img.onload = function () {
        var background = new Konva.Rect({
            x: 0,
            y: 0,
            width: stage.width(),
            height: stage.height(),
            illLinearGradientStartPoint: { x: 0, y: 0 },
            fillLinearGradientEndPoint: { x: stage.width(), y: stage.height() },
            fillPatternImage: img,
        });


        layer.add(background);
        layer.draw();
    }
        var layer = new Konva.Layer();

        stage.on('pointerdown', MouseDownHandler);
        stage.on('pointermove', MouseMoveHandler);
        //stage.on('pointerover', handleMouseOverStartPoint);
        stage.add(layer);
    circle1 = new Konva.Circle({
        x: 200,
        y: 150,
        radius: 10,
        fill: "magenta"
    }),
        circle2 = circle1.clone(),
        $("#stage1ZoomIn").on("click", function () {
            zoomStage1(zoomStep);
        });
    $("#stage1ZoomOut").on("click", function () {
        zoomStage1(-zoomStep);
    });






    $("#stage2ZoomIn").on("click", function () {
        scale2 = zoomStage2(stage, circle2.position(), scale2, zoomStep);
    });
    $("#stage2ZoomOut").on("click", function () {
        scale2 = zoomStage2(stage, circle2.position(), scale2, -zoomStep);
    });



    stage.on("wheel", function (e) {
        e.evt.preventDefault();

        var pointer = stage.getPointerPosition();

        zoomInc = e.evt.deltaY > 0 ? -zoomStep : zoomStep;

        scale2 = zoomStage2(stage, pointer, scale2, zoomInc);
    });

    $("#reset").on("click", function () {

        scale2 = 1;
        stage.scale({ x: scale2, y: scale2 });
        stage.position({ x: 0, y: 0 });
    });


    function zoomStage2(stage, zoomPoint, zoomBefore, inc) {

        let oldScale = stage.scaleX();
        var mousePointTo = {
            x: (zoomPoint.x - stage.x()) / oldScale,
            y: (zoomPoint.y - stage.y()) / oldScale
        };
        let zoomAfter = zoomBefore + inc;
        stage.scale({ x: zoomAfter, y: zoomAfter });
        var newPos = {
            x: zoomPoint.x - mousePointTo.x * zoomAfter,
            y: zoomPoint.y - mousePointTo.y * zoomAfter
        };
        stage.position(newPos);
        return zoomAfter;
    }

    $("#reset").on("click", function () {
        scale1 = 1;
        stage.scale({ x: scale1, y: scale1 });


    });


    function zoomStage2(stage, zoomPoint, zoomBefore, inc) {

        let oldScale = stage.scaleX();

        var mousePointTo = {
            x: (zoomPoint.x - stage.x()) / oldScale,
            y: (zoomPoint.y - stage.y()) / oldScale
        };


        let zoomAfter = zoomBefore + inc;


        stage.scale({ x: zoomAfter, y: zoomAfter });


        var newPos = {
            x: zoomPoint.x - mousePointTo.x * zoomAfter,
            y: zoomPoint.y - mousePointTo.y * zoomAfter
        };

        stage.position(newPos);

        return zoomAfter;
    }
    //stage.on('dblclick', (e) => {

    //    alert(CurrentObjName);
    //    if (CurrentObjName[0]=='I') {

    //    }


    //});
    var container = stage.container();

    // make it focusable

    container.tabIndex = 1;
    // focus it
    // also stage will be in focus on its click
    container.focus();
    container.addEventListener('keydown', function (e) {
            //alert(e.keyCode);
        if (e.keyCode === 27 || e.keyCode === 13) {
            if (CurrentObjName[0] == "I") {
                UnSelectObj(CurrentObjId);
                var SubCategoryID = $("#SubCatId").text();
                var SubcategoryName = $("#SName").text();
                var UniqueId = $("#IWId").val();
                var OrderId = $("#OrderId").val();
                var IWLength = $("#IWL").val();

                //$("#EndIW").hide();
                $(".IWPD").hide();
                $("#SName").text("");
                $("#SubCatId").text("");
                $("#btn_IW *").prop('disabled', true);

                var model = {
                    UniqueId: UniqueId,
                    SubCategoryID: SubCategoryID,
                    SubcategoryName: SubcategoryName,
                    OrderId: OrderId,
                    IWLength: IWLength,
                };

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("AddOrderDetails", "Customer")",
                    data: JSON.stringify(model),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (r) {
                        $("#TotalAmount").text(r);
                        $("#TotalAmountInput").val(r);
                    }
                });
                $("#DeleteObj").hide();
                var node = layer.findOne('#' + UniqueId);
                var SI = Number(UniqueId.replace("Line", ""));
                var SRect = StartRect[SI - 1];
                var ERect = FindLastId(SRect);
                var Ltext = ERect.replace("Rect", "Text");
                var Points = node.points();
                Points.pop();
                Points.pop();
                node.points(Points);
                isDraw = false;
                isFinished = true;
                var node = layer.findOne('#' + Ltext);
                node.destroy();
                $("#EndIW").hide();

                var node = layer.findOne('#' + UniqueId.replace("Line", "SRect"));
                node.destroy();

                CurrentObjId = "";
                CurrentObjName = "";

            }
            else if (CurrentObjName[0] == "P") {
                UnSelectObj(CurrentObjId);
                var SubCategoryID = $("#SubCatId").text();
                var SubcategoryName = $("#SName").text();
                var UniqueId = $("#PEId").val();
                var OrderId = $("#OrderId").val();
                var PELength = $("#PEL").val();

                //$("#EndPE").hide();
                $(".PEPD").hide();
                $("#SName").text("");
                $("#SubCatId").text("");
                $("#btn_PE *").prop('disabled', true);

                var model = {
                    UniqueId: UniqueId,
                    SubCategoryID: SubCategoryID,
                    SubcategoryName: SubcategoryName,
                    OrderId: OrderId,
                    PELength: PELength,
                };

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("AddOrderDetails", "Customer")",
                    data: JSON.stringify(model),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (r) {
                        $("#TotalAmount").text(r);
                        $("#TotalAmountInput").val(r);
                    }
                });
                $("#DeleteObj").hide();
                var node = layer.findOne('#' + UniqueId);
                var SI = Number(UniqueId.replace("Line", ""));
                var SRect = StartRect[SI-1];
                var ERect = FindLastId(SRect);
                var Ltext = ERect.replace("Rect", "Text");
                var Points = node.points();
                Points.pop();
                Points.pop();
                node.points(Points);
                isDraw = false;
                isFinished = true;
                var node = layer.findOne('#' + Ltext);
                node.destroy();
                $("#EndPE").hide();

                var node = layer.findOne('#' + UniqueId.replace("Line", "SRect"));
                node.destroy();

                CurrentObjId = "";
                CurrentObjName = "";
            }
        }

        e.preventDefault();
    });



     stage.on('click', (e) => {
        //console.log(e.target.id());
         //alert(e.target.id());
         console.log("Clicked  " + e.target.id());
         console.log("Old Current " +OldCurrentObjId);
         console.log("Current " + CurrentObjId);
         //if (CurrentObjId != null && CurrentObjId != "" && ((e.target.id() != ""||(e.target.id() == "" && CurrentObjId[0]!="L")))) {
         if (CurrentObjId != null && CurrentObjId != "" && (CurrentObjId[0]!="L")) {
             UnSelectObjOnNew(CurrentObjId);
         }
         else {
             if (OldCurrentObjId != null && OldCurrentObjId != "" ) {
                 UnSelectObj(OldCurrentObjId);
             }
         }

         if (CurrentObjId == null || CurrentObjId=="") {
             $("#ObjUniqueId").val(e.target.id().replace("Arc","Sprinkler"));
         var UniqueId = $("#ObjUniqueId").val();

         OldCurrentObjId = UniqueId;
        //alert(UniqueId);
         if (UniqueId != null && UniqueId != "") {
             //console.log(UniqueId);
            var OrderId = $("#OrderId").val();

             var model = {
                    UniqueId: UniqueId,
                    OrderId: OrderId,
             };

            $.ajax({
                type: "POST",
                url: "@Url.Action("GetObjOrderDetails", "Customer")",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {

                    if (r.Data != null) {
                        console.log(r.Data);
                        if (r.UniqueId[0] == 'L') {
                            $("#SName").text(r.Data.SubcategoryName);
                            $("#SubCatId").text(r.Data.SubCategoryID);
                        }
                        else {
                            if (r.Ret == 1) {
                                $("#SName").text(r.Data.SubcategoryName);
                                $("#SubCatId").text(r.Data.SubCategoryID);
                            }
                            else if (r.Ret == 2) {
                                $("#SName").text(r.Data.SubcategoryName);
                                $("#SubCatId").text(r.Data.SubcategoryID);
                            }
                        }


                        if (r.UniqueId[0] == 'L') {
                            $("#IWId").val(r.Data.UniqueId);
                            $("#IWL").val(r.Data.IWLength);
                            var node = layer.findOne('#' + r.UniqueId);
                            //if (node.name() == "Irrigation Wiring") {
                            //    $(".IWPD").show();
                            //    $("#EndIW").hide();
                            //    //$("#EndIW").hide();
                            //}
                            //else if (node.name() == "PE Pipeline") {
                            //    $(".PEPD").show();
                            //    $("#EndPE").hide();
                            //    //$("#EndPE").hide();
                            //}

                            OldCurrentObjId = r.Data.UniqueId;

                            var temp = Number(r.Data.UniqueId.replace("Line", ""));
                            FirstId = StartRect[temp - 1];
                            LastId = FindLastId(FirstId);


                            var CheckId = layer.findOne('#' + r.Data.UniqueId);
                            for (var i = Number(FirstId.replace("Rect", "")); i <= Number(LastId.replace("Rect", "")); i++) {
                                var node = layer.findOne('#Rect' + i);
                                node.show();
                                if (CheckId.name() == "Irrigation Wiring" && i == Number(LastId.replace("Rect", ""))) {
                                    $(".IWPD").show();
                                    $("#EndIW").hide();
                                }
                                else if (CheckId.name() == "PE Pipeline" && i == Number(LastId.replace("Rect", ""))) {

                                    $(".PEPD").show();
                                    $("#EndPE").hide();
                                }
                                else {
                                    node = layer.findOne('#Text' + i);
                                    node.show();
                                }
                            }
                            $("#SName").text("");
                            isOutArea = false;



                        }
                        else if (r.UniqueId[0] == 'S' && r.UniqueId[1] == 'p') {
                            $("#SId").val(r.Data.UniqueId);
                            $("#SRadius").val(r.Data.ThrowDistanceMax);
                            $("#StartAngle").val(r.Data.MinAngle);
                            $("#SAngle").val(r.Data.MaxAngle);
                            $(".RSPD").show();
                            $("#BtnEndsprinkler").show();
                            CurretSprinkler = r.Data.UniqueId;

                            var node = layer.findOne('#' + r.UniqueId);
                            if (node != null) {
                                node.show();
                            }
                            var node = layer.findOne('#' + r.UniqueId.replace("Sprinkler", "FillCircle"));
                            if (node != null) {
                                node.show();
                            }
                            var node = layer.findOne('#' + r.UniqueId.replace("Sprinkler", "Circle"));
                            if (node != null) {
                                node.show();
                            }
                            var node = layer.findOne('#' + r.UniqueId.replace("Sprinkler", "MoveCircle"));
                            if (node != null) {
                                node.show();
                            } var node = layer.findOne('#' + r.UniqueId.replace("Sprinkler", "Arc"));
                            if (node != null) {
                                node.strokeWidth(0);
                                node.listening(false);
                            }


                        }
                        else if (r.UniqueId[0] == 'R' && r.UniqueId[1] == 'e') {

                            $("#SSId").val(r.UniqueId);
                            $("#SSWidth").val(r.Data.ThrowWidth);
                            $("#SSHeight").val(r.Data.ThrowHeight);

                            $(".SSPD").show();
                            $("#BtnEndRectangularsprinkler").show();
                            CurretRSprinkler = r.UniqueId;

                        }
                        else if (r.UniqueId[0] == 'S' && r.UniqueId[1] == 'y') {

                            $("#ICId").val(r.UniqueId);
                            $("#ICS").text(r.Data.IrrigationComputermaxstation);
                            if (r.Data.IrrigationComputerindoor == "True") {
                                $("#ICID").show();
                            }
                            if (r.Data.IrrigationComputeroutdoor == "True") {
                                $("#ICOD").show();
                            }
                            if (r.Data.IrrigationComputersmarphone == "True") {
                                $("#ICSP").show();
                            }

                            $(".ICPD").show();
                            $("#EndIC").show();
                            CurretIC = r.UniqueId;
                            $("#btn_IC *").prop('disabled', false);
                            node = layer.findOne('#' + r.UniqueId);
                            node.off('mouseover');

                            node.on('mouseover', (e) => {
                                stage.container().style.cursor = 'move';
                            });
                            node.draggable(true);
                            node = layer.findOne('#' + r.UniqueId.replace("System", "TIC"));
                            node.show();
                        }
                        else if (r.UniqueId[0] == 'V') {


                            $("#VBId").val(r.UniqueId);
                            if (r.Data.valveboxFilter == "True") {
                                $("#VBF").show();
                            }
                            if (r.Data.drinkingwatersource == "True") {
                                $("#VBDW").show();
                            }
                            if (r.Data.wellwatersource == "True") {
                                $("#VBWW").show();
                            }
                            if (r.Data.rainwatersource == "True") {
                                $("#VBRW").show();
                            }

                            $(".VBPD").show();
                            $("#EndVB").show();
                            CurretVB = r.UniqueId;
                            $("#btn_VB *").prop('disabled', false);
                            node = layer.findOne('#' + r.UniqueId);
                            node.off('mouseover');

                            node.on('mouseover', (e) => {
                                stage.container().style.cursor = 'move';
                            });
                            node.draggable(true);
                            node = layer.findOne('#' + r.UniqueId.replace("ValveBox", "TVB"));
                            node.show();

                        }
                        else if (r.UniqueId[0] == 'T' && r.UniqueId[1] == 'a') {
                            $("#TapId").val(r.UniqueId);
                            $("#TapSelect").val(r.Data.SubcategoryID);

                            $(".TapPD").show();
                            $("#EndTap").show();
                            CurretTap = r.UniqueId;
                            $("#btn_TAP *").prop('disabled', false);
                            node = layer.findOne('#' + r.UniqueId);
                            node.off('mouseover');

                            node.on('mouseover', (e) => {
                                stage.container().style.cursor = 'move';
                            });
                            node.draggable(true);
                            node = layer.findOne('#' + r.UniqueId.replace("Tap", "TTap"));
                            node.show();
                        }

                        $("#DeleteObj").show();
                        $("#CancleDeleteObj").show();

                    }
                    if (r.UniqueId[0] == 'L') {

                        OldCurrentObjId = r.UniqueId;

                        var temp = Number(r.UniqueId.replace("Line", ""));
                        FirstId = StartRect[temp - 1];
                        LastId = FindLastId(FirstId);


                        var CheckId = layer.findOne('#' + r.UniqueId);
                        for (var i = Number(FirstId.replace("Rect", "")); i <= Number(LastId.replace("Rect", "")); i++) {
                            var node = layer.findOne('#Rect' + i);
                            node.show();
                            if (CheckId.name() == "Irrigation Wiring" && i == Number(LastId.replace("Rect", ""))) {
                                $(".IWPD").show();
                                $("#EndIW").hide();
                            }
                            else if (CheckId.name() == "PE Pipeline" && i == Number(LastId.replace("Rect", ""))) {

                                $(".PEPD").show();
                                $("#EndPE").hide();
                            }
                            else {
                                node = layer.findOne('#Text' + i);
                                node.show();
                            }
                        }
                        isOutArea = false;


                        var node = layer.findOne('#' + r.UniqueId);
                        $("#SName").text(node.name());
                        $("#DeleteObj").show();
                        $("#CancleDeleteObj").show();
                    }
                    if (r.UniqueId == 'UploadImg') {

                        var node = layer.findOne('#' + r.UniqueId);
                        $("#SName").text(node.name());
                        $("#DeleteObj").show();
                        $("#CancleDeleteObj").show();
                        $(".DivImageOpacityValue").show();
                        node = layer.findOne('#' + r.UniqueId);
                        node.draggable(true);
                        node = layer.findOne('#' + r.UniqueId.replace("UploadImg", "TUploadImg"));
                        node.show();
                    }



                }
            });
        }


         }




     });



    stage.on('mouseover', (e) => {


        var UniqueId = e.target.id().replace("Arc", "Sprinkler");


        //alert(UniqueId);
         if (UniqueId != null && UniqueId != "") {
             console.log(UniqueId);
             if (UniqueId[0] == 'S' && UniqueId[1] == 'y') {

                 node = layer.findOne('#' + UniqueId);

                 node.draggable(true);
             }
             else if (UniqueId[0] == 'V') {


                 node = layer.findOne('#' + UniqueId);

                 node.draggable(true);

             }
             else if (UniqueId[0] == 'T' && UniqueId[1] == 'a') {
                 node = layer.findOne('#' + UniqueId);

                 node.draggable(true);
             }
        }
    });




    $("body").on("change", "#SprinklerTypeDropID", function () {
        let element = document.getElementById("SprinklerTypeDropID");
        if (CurrentObjId != "" && CurrentObjId[0] != "S" && CurrentObjId[1] != "p") {
            UnSelectObjOnNew(CurrentObjId);
        }

        $(".RSPD").show();
        var Radius = MToPx(Number(element.options[element.selectedIndex].getAttribute("data-radius")));
        var Angle = Number(element.options[element.selectedIndex].getAttribute("data-Angle"));
        var Rotation = Number(element.options[element.selectedIndex].getAttribute("data-Rotation"));
        var SubName = element.options[element.selectedIndex].getAttribute("data-Name");
        var SubId = element.options[element.selectedIndex].getAttribute("data-SubCatId");

        if (SubName == "MP 800 90-210") {
            MovCirColor = "#FF0000";
        }
        else if (SubName == "MP 800 360") {
            MovCirColor = "#8FD65A";
        }
        else if (SubName == "MP 1000 90-210") {
            MovCirColor = "#C55A11";
        }
        else if (SubName == "MP 1000 210-270") {
            MovCirColor = "#00B0F0";
        }
        else if (SubName == "MP 1000 360") {
            MovCirColor = "#5DA329";
        }
        else if (SubName == "MP 2000 90-210") {
            MovCirColor = "#000000";
        }
        else if (SubName == "MP 2000 210-270") {
            MovCirColor = "#51DF5F";
        }
        else if (SubName == "MP 2000 360") {
            MovCirColor = "#ED7D31";
        }
        else if (SubName == "MP 3000 90-210") {
            MovCirColor = "#0070C0";
        }
        else if (SubName == "MP 3000 210-270") {
            MovCirColor = "#FEDA01";
        }
        else if (SubName == "MP 3000 360") {
            MovCirColor = "#858062";
        }
        else if (SubName == "MP 3500 90-210") {
            MovCirColor = "#FFC000";
        }
        else if (SubName == "MP Corner") {
            MovCirColor = "#00B0F0";
        }

        $("#SprinklerTypeDropID").val(SubName);

        if (CurretSprinkler != "") {
            var node = layer.findOne('#' + CurretSprinkler);
            var x = node.x();
            var y = node.y();
            var UniqueId = node.id();
            node.destroy();
            var node = layer.findOne('#' + CurretSprinkler.replace("Sprinkler", "FillCircle"));
            if (node != null) {
                node.destroy();
            }
            var node = layer.findOne('#' + CurretSprinkler.replace("Sprinkler", "Circle"));
            if (node != null) {
                node.destroy();
            }
            var node = layer.findOne('#' + CurretSprinkler.replace("Sprinkler", "Arc"));
            if (node != null) {
                node.destroy();
            }
            var node = layer.findOne('#' + CurretSprinkler.replace("Sprinkler", "MoveCircle"));
            if (node != null) {
                node.destroy();
            }


            var OrderId = $("#OrderId").val();


            var index = UndoArray.indexOf(UniqueId);
            if (index >= 0) {
                UndoArray.splice(index, 1);
            }

            $("#DeleteObj").hide();


            var model = {
                UniqueId: UniqueId,
                OrderId: OrderId,
            };

            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteOrderDetails", "Customer")",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    $("#TotalAmount").text(r);
                    $("#TotalAmountInput").val(r);
                }
            });




            var circle = new Konva.Circle({
                x: x,
                y: y,
                radius: Radius,
                //fill: 'red',
                stroke: 'black',
                strokeWidth: 1,
                id: "Sprinkler" + SprinklerName + "",
                name: "Sprinkler",

            });

            var cir = new Konva.Circle({
                x: x - circle.radius(),
                y: y,
                radius: 5,
                //fill: 'red',
                stroke: 'black',
                strokeWidth: 1,
                id: circle.id().replace("Sprinkler", "Circle"),
                draggable: true,
            });


            cir.on('mouseover', (e) => {
                stage.container().style.cursor = 'pointer';
            });

            cir.on('mouseout', (e) => {
                stage.container().style.cursor = 'default';
            });

            cir.on('dragmove', (e) => {
                var node = layer.findOne('#' + CurretSprinkler);
                var x = node.x();
                var y = node.y();


                const pos = cir.absolutePosition();
                var x2 = e.target.x();
                var y2 = e.target.y();

                var dx = x - x2;
                var dy = y - y2;
                var Sumsqr = Math.pow(dx, 2);
                Sumsqr += Math.pow(dy, 2);
                var Distance = Math.sqrt(Sumsqr);

                //console.log(PxToM(Distance) + "--- " + scale);
                if (PxToM(Distance) > 2.1) {
                    var radius = 132;
                    var scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
                    if (scale < 1) {


                        cir.x(Math.round((pos.x - x) * scale + x));
                        cir.y(Math.round((pos.y - y) * scale + y));

                    }
                    else {
                        updateSprinkler(e.target.id());
                    }
                }
                else {
                    var radius = 26;

                    var scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
                    if (scale > 1) {


                        cir.x(Math.round((pos.x - x) * scale + x));
                        cir.y(Math.round((pos.y - y) * scale + y));

                    }
                    else {
                        updateSprinkler(e.target.id());
                    }
                }

                cir.moveToTop();

            });

            layer.add(cir);

            var cirFill = new Konva.Circle({
                x: x + circle.radius(),
                y: y,
                radius: 5,
                //fill: 'red',
                stroke: 'black',
                strokeWidth: 1,
                id: circle.id().replace("Sprinkler", "FillCircle"),
                draggable: true,
            });

            cirFill.on('mouseover', (e) => {
                stage.container().style.cursor = 'pointer';
            });

            cirFill.on('mouseout', (e) => {
                stage.container().style.cursor = 'default';
            });


            cirFill.on('dragmove', (e) => {



                var node = layer.findOne('#' + CurretSprinkler);
                var x = node.x();
                var y = node.y();


                const pos = cirFill.absolutePosition();
                var x2 = e.target.x();
                var y2 = e.target.y();

                var dx = x - x2;
                var dy = y - y2;
                var Sumsqr = Math.pow(dx, 2);
                Sumsqr += Math.pow(dy, 2);
                var Distance = Math.sqrt(Sumsqr);

                //console.log(PxToM(Distance) + "--- " + scale);
                if (PxToM(Distance) > 2.1) {
                    var radius = 132;
                    var scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
                    if (scale < 1) {


                        cirFill.x(Math.round((pos.x - x) * scale + x));
                        cirFill.y(Math.round((pos.y - y) * scale + y));

                    }
                    else {
                        updateSprinkler(e.target.id());
                    }
                }
                else {
                    var radius = 26;

                    var scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
                    if (scale > 1) {


                        cirFill.x(Math.round((pos.x - x) * scale + x));
                        cirFill.y(Math.round((pos.y - y) * scale + y));

                    }
                    else {
                        updateSprinkler(e.target.id());
                    }
                }

                cirFill.moveToTop();
            });

            layer.add(cirFill);

            var ArcCir = new Konva.Arc({
                x: x,
                y: y,
                innerRadius: circle.radius(),
                angle: Angle - Rotation,
                fill: 'lightblue',
                stroke: 'black',
                strokeWidth: 0,
                id: circle.id().replace("Sprinkler", "Arc"),
                //draggable: true,
                listening: false,
                rotation: Rotation,
            });


            layer.add(ArcCir);

            var cirMove = new Konva.Circle({
                x: x,
                y: y,
                radius: 5,
                fill: MovCirColor,
                stroke: 'black',
                strokeWidth: 0,
                id: circle.id().replace("Sprinkler", "MoveCircle"),
                draggable: true,
                listening: true,
            });

            cirMove.on('mouseover', (e) => {
                stage.container().style.cursor = 'move';
            });

            cirMove.on('mouseout', (e) => {
                stage.container().style.cursor = 'default';
            });

            cirMove.on('dragmove', (e) => {
                MovCir = layer.findOne('#' + id);
                updateSprinklerMove(e.target.id(), MovCir.x(), MovCir.y());
            });

            layer.add(cirMove);
            cirMove.moveToTop();


        }

        //alert(Radius);

        CurretSprinkler = circle.id();

        ////console.log(UndoArray);
        SprinklerName += 1;


            layer.add(circle);

        //alert(poly.name());
        id = circle.id();
        CurrentObjName = circle.name();
        CurrentObjId = circle.id();
        //$("#Area").prop('disabled', true);
        UndoArray.push(circle.id());

        $("#SId").val(circle.id());
        $("#SRadius").val(PxToM(circle.radius()).toFixed(2));
        $("#StartAngle").val(Rotation.toFixed(2));
        $("#SAngle").val(Angle.toFixed(2));
        $("#SName").text(SubName);
        $("#SubCatId").text(SubId);

        //$("#Sprinkler").prop('disabled', true);
        $("#BtnEndsprinkler").show();
        cir.moveToTop();
        cirFill.moveToTop();
        cirMove.moveToTop();





    });

    $("body").on("click", "#Area", function () {


        $("#Area").css("border", "#8ec746  solid 1px");
        $("#Area").css("background-color", "rgb(40, 167, 69,0.4)");
        if (CurrentObjId != null && CurrentObjId != "") {
            if (CurrentObjId[0] == "L") {
                $("#UndoCanvas").click();
            }
            else {
                UnSelectObjOnNew(CurrentObjId);
            }
            
        }
        else {
            if (OldCurrentObjId != null && OldCurrentObjId != "") {
                UnSelectObj(OldCurrentObjId);
            }
        }
            //alert(this.id);
            poly = new Konva.Line({
                points: [0, 0],
                stroke: 'black',
                strokeWidth: 3,
                lineCap: 'round',
                lineJoin: 'round',
                id: "Line" + PolyName + "",
                listening: false,
                name: "Area",
            });

        poly.on('mouseover', (e) => {
            stage.container().style.cursor = 'pointer';
        });

        poly.on('mouseout', (e) => {
            stage.container().style.cursor = 'default';
        });


            poly.on('pointerdown', function () {
                //alert(this.id()); //Should show 'IDofImg'
                if (this.name() == "Area") {
                isInArea = true;
                    }

                });

            poly.on('pointerout', function () {
                isOutArea = true;
            //console.log(isOutArea);

                });

            poly.on('pointerenter', function () {
                isOutArea = false;
            //console.log(isOutArea);
                });


            PolyName += 1;
            layer.add(poly);
            isOverOnStarting = false;
            isStartLine = true;
            isFinished = false;
            isFirstMouseMove = true;

            CurrentObjName = poly.name();
            CurrentObjId = poly.id();

            id = poly.id();
            //alert(poly.name());
            //if (this.id == "Area") {
            //    id = "Line1";
            //    }
            //else if (this.id == "DryArea") {
            //    id = "Line2";
            //    }
            $("#Area").prop('disabled', true);

            UndoArray.push(poly.id());
        });


    $("body").on("click", "#DryArea", function () {
        $("#DryArea").css("border", "#8ec746  solid 1px");
        $("#DryArea").css("background-color", "rgb(153, 138, 92,0.4)");
        if (CurrentObjId != null && CurrentObjId != "") {
            if (CurrentObjId[0] == "L") {
                $("#UndoCanvas").click();
            }
            else {
                UnSelectObjOnNew(CurrentObjId);
            }

        }
        else {
            if (OldCurrentObjId != null && OldCurrentObjId != "") {
                UnSelectObj(OldCurrentObjId);
            }
        }
            //alert(this.id);
            var poly = new Konva.Line({
                points: [0, 0],
                stroke: 'black',
                strokeWidth: 3,
                lineCap: 'round',
                lineJoin: 'round',
                id: "Line" + PolyName + "",
                listening: false,
                name: "DryArea",
            });

        poly.on('mouseover', (e) => {
            stage.container().style.cursor = 'pointer';
        });

        poly.on('mouseout', (e) => {
            stage.container().style.cursor = 'default';
        });

            poly.on('pointerdown', function () {
                    //alert(this.id()); //Should show 'IDofImg'
                ////console.log("Line Dry"+" "+this.id());
                console.log(this.name());
                if (this.name() == "Area") {
                    isInArea = true;

                    }
                });

            poly.on('pointerout', function () {
                isOutArea = true;
            //console.log(isOutArea);

                });

            poly.on('pointerenter', function () {
                isOutArea = false;
            //console.log(isOutArea);
                });


            PolyName += 1;
            layer.add(poly);
            isOverOnStarting = false;
            isStartLine = true;
            isFinished = false;
            isFirstMouseMove = true;

            CurrentObjName = poly.name();
            CurrentObjId = poly.id();

                id = poly.id();
            //if (this.id == "Area") {
            //    id = "Line1";
            //    }
            //else if (this.id == "DryArea") {
            //    id = poly.id();
            //        //alert(poly.name() + this.id);
            //}
            UndoArray.push(poly.id());

        });


    $("body").on("click", "#Hedge", function () {
        $("#Hedge").css("border", "#8ec746  solid 1px");
        $("#Hedge").css("background-color", "rgb(210, 191, 255,0.4)");
        if (CurrentObjId != null && CurrentObjId != "") {
            if (CurrentObjId[0] == "L") {
                $("#UndoCanvas").click();
            }
            else {
                UnSelectObjOnNew(CurrentObjId);
            }

        }
        else {
            if (OldCurrentObjId != null && OldCurrentObjId != "") {
                UnSelectObj(OldCurrentObjId);
            }
        }
            //alert(this.id);
            poly = new Konva.Line({
                points: [0, 0],
                stroke: 'black',
                strokeWidth: 3,
                lineCap: 'round',
                lineJoin: 'round',
                id: "Line" + PolyName + "",
                listening: false,
                name: "Hedge",
            });

        poly.on('mouseover', (e) => {
            stage.container().style.cursor = 'pointer';
        });

        poly.on('mouseout', (e) => {
            stage.container().style.cursor = 'default';
        });

            //poly.on('pointerdown', function () {
            //    if (this.id() == "Line1") {
            //    isInArea = true;
            //        }
            //    });

            //poly.on('pointerout', function () {
            //    isOutArea = true;
            ////console.log(isOutArea);

            //    });

            //poly.on('pointerenter', function () {
            //    isOutArea = false;
            ////console.log(isOutArea);
            //    });


            PolyName += 1;
            layer.add(poly);
            isOverOnStarting = false;
            isStartLine = true;
            isFinished = false;
            isFirstMouseMove = true;
        CurrentObjName = poly.name();
        CurrentObjId = poly.id();
        id = poly.id();

        UndoArray.push(poly.id());
     });



    $("body").on("click", "#IW", function () {
        if (CurrentObjId != null && CurrentObjId != "") {
            if (CurrentObjId[0] == "L") {
                $("#UndoCanvas").click();
            }
            else {
                UnSelectObjOnNew(CurrentObjId);
            }

        }
        else {
            if (OldCurrentObjId != null && OldCurrentObjId != "") {
                UnSelectObj(OldCurrentObjId);
            }
        }
        var SubName = $(this).attr("data-Name");
        var SubId = $(this).attr("data-SubCatId");
        $("#SName").text(SubName);
        $("#SubCatId").text(SubId);
        //alert(this.id);
        poly = new Konva.Line({
            points: [0, 0],
            stroke: 'black',
            strokeWidth: 3,
            lineCap: 'round',
            lineJoin: 'round',
            id: "Line" + PolyName + "",
            //listening: false,
            name: "Irrigation Wiring",
            dash: [15, 10],
        });

        poly.on('mouseover', (e) => {
            stage.container().style.cursor = 'pointer';
        });

        poly.on('mouseout', (e) => {
            stage.container().style.cursor = 'default';
        });
        //poly.on('dblclick', function () {
        //    console.log(this);

        //});

        var VBC = $("#VBCircle").val();
        if (VBC = 1) {
            poly.stroke("#FFD966");
        }
        else if (VBC = 2) {
            poly.stroke("#FF0000");
        }
        else if (VBC = 3) {
            poly.stroke("#7030A0");
        }
        else if (VBC = 4) {
            poly.stroke("#5B9BD5");
        }
        else if (VBC = 5) {
            poly.stroke("#00B050");
        }
        else if (VBC = 6) {
            poly.stroke("#7C7C7C");
        }
        else if (VBC = 7) {
            poly.stroke("#D22EB3");
        }
        else if (VBC = 8) {
            poly.stroke("#37C2C9");
        }
        else if (VBC = 9) {
            poly.stroke("#1EF20E");
        }
        else if (VBC = 10) {
            poly.stroke("#3F3B3D");
        }

        PolyName += 1;
        layer.add(poly);
        isOverOnStarting = false;
        isStartLine = true;
        isFinished = false;
        isFirstMouseMove = true;
        CurrentObjName = poly.name();
        CurrentObjId = poly.id();
        id = poly.id();

        $("#IWId").val(poly.id());
        $(".IWPD").show();
        $("#EndIW").show();

        UndoArray.push(poly.id());
    });



    $("body").on("click", "#PE", function () {
        if (CurrentObjId != null && CurrentObjId != "") {
            if (CurrentObjId[0] == "L") {
                $("#UndoCanvas").click();
            }
            else {
                UnSelectObjOnNew(CurrentObjId);
            }

        }
        else {
            if (OldCurrentObjId != null && OldCurrentObjId != "") {
                UnSelectObj(OldCurrentObjId);
            }
        }
        var SubName = $(this).attr("data-Name");
        var SubId = $(this).attr("data-SubCatId");
        $("#SName").text(SubName);
        $("#SubCatId").text(SubId);


        var VBCircle = $("#VBCircle").val();
        //alert(this.id);
        poly = new Konva.Line({
            points: [0, 0],
            stroke: 'black',
            strokeWidth: 3,
            lineCap: 'round',
            lineJoin: 'round',
            id: "Line" + PolyName + "",
            //listening: false,
            name: "PE Pipeline",
        });

        poly.on('mouseover', (e) => {
            stage.container().style.cursor = 'pointer';
        });

        poly.on('mouseout', (e) => {
            stage.container().style.cursor = 'default';
        });

        if (VBCircle == 1) {
            poly.stroke("yellow");
        }
        else if (VBCircle == 2) {
            poly.stroke("red");
        }
        else if (VBCircle == 3) {
            poly.stroke("purple");
        }
        else if (VBCircle == 4) {
            poly.stroke("blue");
        }
        else if (VBCircle == 5) {
            poly.stroke("darkgreen");
        }
        else if (VBCircle == 6) {
            poly.stroke("grey");
        }
        else if (VBCircle == 7) {
            poly.stroke("pink");
        }
        else if (VBCircle == 8) {
            poly.stroke("lightblue");
        }
        else if (VBCircle == 9) {
            poly.stroke("green");
        }
        else if (VBCircle == 10) {
            poly.stroke("black");
        }

        PolyName += 1;
        layer.add(poly);
        isOverOnStarting = false;
        isStartLine = true;
        isFinished = false;
        isFirstMouseMove = true;
        CurrentObjName = poly.name();
        CurrentObjId = poly.id();
        id = poly.id();

        $("#PEId").val(poly.id());
        $(".PEPD").show();
        $("#EndPE").show();

        UndoArray.push(poly.id());
    });

    $("body").on("click", "#EndPE", function () {
        UnSelectObj(CurrentObjId);

        var SubCategoryID = $("#SubCatId").text();
        var SubcategoryName = $("#SName").text();
        var UniqueId = $("#PEId").val();
        var OrderId = $("#OrderId").val();
        var PELength = $("#PEL").val();

        //$("#EndPE").hide();
        $(".PEPD").hide();
        $("#SName").text("");
        $("#SubCatId").text("");
        $("#btn_PE *").prop('disabled', true);

        var model = {
            UniqueId: UniqueId,
            SubCategoryID: SubCategoryID,
            SubcategoryName: SubcategoryName,
            OrderId: OrderId,
            PELength: PELength,
        };

        $.ajax({
            type: "POST",
            url: "@Url.Action("AddOrderDetails", "Customer")",
            data: JSON.stringify(model),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (r) {
                $("#TotalAmount").text(r);
                $("#TotalAmountInput").val(r);
            }
        });
        $("#DeleteObj").hide();
        var node = layer.findOne('#' + UniqueId);
        var SI = Number(UniqueId.replace("Line", ""));
        var SRect = StartRect[SI-1];
        var ERect = FindLastId(SRect);
        var Ltext = ERect.replace("Rect", "Text");
        var Points = node.points();
        Points.pop();
        Points.pop();
        node.points(Points);
        isDraw = false;
        isFinished = true;
        var node = layer.findOne('#' + Ltext);
        node.destroy();
        $("#EndPE").hide();


        CurrentObjId = "";
        OldCurrentObjId = "";
    });


    $("body").on("click", "#GetWet", function () {
        $("#GetWet").css("border", "#8ec746  solid 1px");
        $("#GetWet").css("background-color", "rgb(111, 187, 211,0.4)");
        if (CurrentObjId != null && CurrentObjId != "") {
            if (CurrentObjId[0] == "L") {
                $("#UndoCanvas").click();
            }
            else {
                UnSelectObjOnNew(CurrentObjId);
            }

        }
        else {
            if (OldCurrentObjId != null && OldCurrentObjId != "") {
                UnSelectObj(OldCurrentObjId);
            }
        }
            //alert(this.id);
            poly = new Konva.Line({
                points: [0, 0],
                stroke: 'black',
                strokeWidth: 3,
                lineCap: 'round',
                lineJoin: 'round',
                id: "Line" + PolyName + "",
                listening: false,
                name: "GetWet",
            });


        poly.on('mouseover', (e) => {
            stage.container().style.cursor = 'pointer';
        });

        poly.on('mouseout', (e) => {
            stage.container().style.cursor = 'default';
        });

            //poly.on('pointerdown', function () {
            //    if (this.id() == "Line1") {
            //    isInArea = true;
            //        }
            //    });

            //poly.on('pointerout', function () {
            //    isOutArea = true;
            ////console.log(isOutArea);

            //    });

            //poly.on('pointerenter', function () {
            //    isOutArea = false;
            ////console.log(isOutArea);
            //    });


            PolyName += 1;
            layer.add(poly);
            isOverOnStarting = false;
            isStartLine = true;
            isFinished = false;
            isFirstMouseMove = true;

        CurrentObjName = poly.name();
        CurrentObjId = poly.id();


        id = poly.id();

        UndoArray.push(poly.id());
     });


    $("body").on("click", "#TAP", function () {
        //alert(this.id);
        //var imageObj = new Image();
        //imageObj.onload = function () {
        //    var yoda = new Konva.Image({
        //        x: 50,
        //        y: 50,
        //        image: imageObj,
        //        width: 25,
        //        height: 25,
        //        id: "Tap" + TapName,
        //        draggable: true,
        //    });
        //    TapName += 1;
        //    // add the shape to the layer
        //    layer.add(yoda);
        //    UndoArray.push(yoda.id());
        //};
        //imageObj.src = '/assets/images/ecommerce/Tap.png';
        if (CurrentObjId != null && CurrentObjId != "") {
            if (CurrentObjId[0] == "L") {
                $("#UndoCanvas").click();
            }
            else {
                UnSelectObjOnNew(CurrentObjId);
            }

        }
        else {
            if (OldCurrentObjId != null && OldCurrentObjId != "") {
                UnSelectObj(OldCurrentObjId);
            }
        }

        if (CurretTap != "") {
            var SubName = $(this).attr("data-Name");
            var SubId = $(this).attr("data-SubCatId");
            $("#SName").text(SubName);
            $("#SubCatId").text(SubId);
            $("#TapSelect").val(SubId);



            var UniqueId = CurretTap;

             var OrderId = $("#OrderId").val();


            $("#DeleteObj").hide();


            var model = {
                UniqueId: UniqueId,
                OrderId: OrderId,
            };

            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteOrderDetails", "Customer")",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    $("#TotalAmount").text(r);
                    $("#TotalAmountInput").val(r);
                }
            });

        }
        else {


            var SubName = $(this).attr("data-Name");
            var SubId = $(this).attr("data-SubCatId");
            $("#TapSelect").val(SubId);



            Konva.Image.fromURL(
                '/assets/images/ecommerce/Tap.png',
                (img) => {
                    img.setAttrs({
                        x: 50,
                        y: 50,
                        width: 25,
                        height: 25,
                        id: "Tap" + TapName,
                        draggable: true,
                    });

                    img.on('mouseover', (e) => {
                        stage.container().style.cursor = 'move';
                    });

                    img.on('mouseout', (e) => {
                        stage.container().style.cursor = 'default';
                    });
                    layer.add(img);
                    UndoArray.push(img.id());
                    $("#SName").text(SubName);
                    $("#SubCatId").text(SubId);
                    $("#TapId").val(img.id());
                    CurretTap = img.id();
                    CurrentObjId = img.id();
                    // apply default left-top crop
                    //applyCrop('center-middle');

                    const tr = new Konva.Transformer({
                        nodes: [img],
                        keepRatio: true,
                        enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right'],
                        id: img.id().replace("Tap", "TTap")
                    });

                    layer.add(tr);
                    tr.anchorCornerRadius(10);
                    tr.rotateEnabled(false);
                }
            );
        }

        $(".TapPD").show();
        $("#EndTap").show();

    });


    $("body").on("click", "#EndTap", function () {

        //$("#Sprinkler").prop('disabled', false);
        //

        SubCategoryID = $("#SubCatId").text();
        SubcategoryName = $("#SName").text();
        UniqueId = $("#TapId").val();
        OrderId = $("#OrderId").val();

        $("#EndTap").hide();
        $(".TapPD").hide();
        $("#SName").text("");
        $("#SubCatId").text("");
        $("#btn_TAP *").prop('disabled', true);

        var model = {
            UniqueId: UniqueId,
            SubCategoryID: SubCategoryID,
            SubcategoryName: SubcategoryName,
            OrderId: OrderId,
        };

        $.ajax({
            type: "POST",
            url: "@Url.Action("AddOrderDetails", "Customer")",
            data: JSON.stringify(model),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (r) {
                $("#TotalAmount").text(r);
                $("#TotalAmountInput").val(r);
            }
        });

        var node = layer.findOne('#' + UniqueId);
        if (node != null) {
            node.off('mouseover');
            node.on('mouseover', (e) => {
                stage.container().style.cursor = 'pointer';
            });
            node.draggable(false);
        }
        var node = layer.findOne('#' + UniqueId.replace("Tap", "TTap"));
        if (node != null) {
            node.hide();
        }

        $("#DeleteObj").hide();
        $("#CancleDeleteObj").hide();

        CurrentObjId = "";
    });


    $("body").on("click", "#EndIW", function () {
        UnSelectObj(CurrentObjId);

        var SubCategoryID = $("#SubCatId").text();
        var SubcategoryName = $("#SName").text();
        var UniqueId = $("#IWId").val();
        var OrderId = $("#OrderId").val();
        var IWLength = $("#IWL").val();

        //$("#EndIW").hide();
        $(".IWPD").hide();
        $("#SName").text("");
        $("#SubCatId").text("");
        $("#btn_IW *").prop('disabled', true);

        var model = {
            UniqueId: UniqueId,
            SubCategoryID: SubCategoryID,
            SubcategoryName: SubcategoryName,
            OrderId: OrderId,
            IWLength: IWLength,
        };

        $.ajax({
            type: "POST",
            url: "@Url.Action("AddOrderDetails", "Customer")",
            data: JSON.stringify(model),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (r) {
                $("#TotalAmount").text(r);
                $("#TotalAmountInput").val(r);
            }
        });
        $("#DeleteObj").hide();
        $("#CancleDeleteObj").hide();
        var node = layer.findOne('#' + UniqueId);
        var SI = Number(UniqueId.replace("Line", ""));
        var SRect = StartRect[SI-1];
        var ERect = FindLastId(SRect);
        var Ltext = ERect.replace("Rect", "Text");
        var Points = node.points();
        Points.pop();
        Points.pop();
        node.points(Points);
        isDraw = false;
        isFinished = true;
        var node = layer.findOne('#' + Ltext);
        node.destroy();
        $("#EndIW").hide();

        CurrentObjId = "";
        OldCurrentObjId = "";
    });



    $("body").on("click", "#IC", function () {

        var SprinklerCounr = $("#SprinklerCount").val();
        //alert(SprinklerCounr);
        //alert(this.id);
        //var imageObj = new Image();
        //imageObj.onload = function () {
        //    var yoda = new Konva.Image({
        //        x: 50,
        //        y: 50,
        //        image: imageObj,
        //        width: 25,
        //        height: 25,
        //        id: "System" + SystemName,
        //        draggable: true,
        //    });
        //    SystemName += 1;
        //    // add the shape to the layer
        //    layer.add(yoda);
        //    UndoArray.push(yoda.id());
        //};
        //imageObj.src = '/assets/images/ecommerce/System.png';
        if (CurrentObjId != null && CurrentObjId != "") {
            if (CurrentObjId[0] == "L") {
                $("#UndoCanvas").click();
            }
            else {
                UnSelectObjOnNew(CurrentObjId);
            }

        }
        else {
            if (OldCurrentObjId != null && OldCurrentObjId != "") {
                UnSelectObj(OldCurrentObjId);
            }
        }
        $(".IW2").hide();
        $(".IW4").hide();
        $(".IW6").hide();
        $(".IW8").hide();
        $(".IW12").hide();

        if (CurretIC != "") {
            var Station = $(this).attr("data-Station");
            var InDoor = $(this).attr("data-InDoor");
            var OutDoor = $(this).attr("data-OutDoor");
            var SP = $(this).attr("data-SP");
            var SubName = $(this).attr("data-Name");
            var SubId = $(this).attr("data-SubCatId");
            if (Station == "14") {
                $(".IW" + "12").show();
            }
            else {
                $(".IW" + Station).show();
            }
            $("#SName").text(SubName);
            $("#SubCatId").text(SubId);
            $("#ICS").text(Station);
            if (InDoor == "True") {
                $("#ICID").show();
            }
            if (OutDoor == "True") {
                $("#ICOD").show();
            }
            if (SP == "True") {
                $("#ICSP").show();
            }



            var UniqueId = CurretIC;

             var OrderId = $("#OrderId").val();


            $("#DeleteObj").hide();


            var model = {
                UniqueId: UniqueId,
                OrderId: OrderId,
            };

            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteOrderDetails", "Customer")",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    $("#TotalAmount").text(r);
                    $("#TotalAmountInput").val(r);
                }
            });


        }
        else {

            var Station = $(this).attr("data-Station");
            var InDoor = $(this).attr("data-InDoor");
            var OutDoor = $(this).attr("data-OutDoor");
            var SP = $(this).attr("data-SP");
            var SubName = $(this).attr("data-Name");
            var SubId = $(this).attr("data-SubCatId");
            if (Station == "14") {
                $(".IW" + "12").show();
            }
            else {
                $(".IW" + Station).show();
            }

            $("#ICS").text(Station);
            if (InDoor == "True") {
                $("#ICID").show();
            }
            if (OutDoor == "True") {
                $("#ICOD").show();
            }
            if (SP == "True") {
                $("#ICSP").show();
            }



            Konva.Image.fromURL(
                '/assets/images/ecommerce/System.png',
                (img) => {
                    img.setAttrs({
                        x: 50,
                        y: 50,
                        width: 25,
                        height: 25,
                        id: "System" + SystemName,
                        draggable: true,
                    });
                    layer.add(img);
                    UndoArray.push(img.id());

                    $("#SName").text(SubName);
                    $("#SubCatId").text(SubId);
                    $("#ICId").val(img.id());
                    CurretIC = img.id();
                    CurrentObjId = img.id();
                    // apply default left-top crop
                    //applyCrop('center-middle');

                    var tr = new Konva.Transformer({
                        nodes: [img],
                        keepRatio: true,
                        enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right'],
                        id: img.id().replace("System", "TIC")
                    });
                    img.on('mouseover', (e) => {
                        stage.container().style.cursor = 'move';
                    });

                    img.on('mouseout', (e) => {
                        stage.container().style.cursor = 'default';
                    });

                    layer.add(tr);
                    tr.anchorCornerRadius(10);
                    tr.rotateEnabled(false);
                }
            );
        }

        $(".ICPD").show();
        $("#EndIC").show();




    });


    $("body").on("click", "#EndIC", function () {

        //$("#Sprinkler").prop('disabled', false);
        //

        SubCategoryID = $("#SubCatId").text();
        SubcategoryName = $("#SName").text();
        UniqueId = $("#ICId").val();
        OrderId = $("#OrderId").val();

        $("#EndIC").hide();
        $(".ICPD").hide();
        $("#SName").text("");
        $("#SubCatId").text("");
        //$("#btn_IC").prop("disabled", true);
        $("#btn_IC *").prop('disabled', true);


        var model = {
            UniqueId: UniqueId,
            SubCategoryID: SubCategoryID,
            SubcategoryName: SubcategoryName,
            OrderId: OrderId,
        };

        $.ajax({
            type: "POST",
            url: "@Url.Action("AddOrderDetails", "Customer")",
            data: JSON.stringify(model),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (r) {
                $("#TotalAmount").text(r);
                $("#TotalAmountInput").val(r);
            }
        });
        var node = layer.findOne('#' + UniqueId);
        if (node != null) {
            node.off('mouseover');
            node.on('mouseover', (e) => {
                stage.container().style.cursor = 'pointer';
            });
            node.draggable(false);
        }
        var node = layer.findOne('#' + UniqueId.replace("System", "TIC"));
        if (node != null) {
            node.hide();
        }
        $("#DeleteObj").hide();
        $("#CancleDeleteObj").hide();

        CurrentObjId = "";
    });


    $("body").on("click", "#VB", function () {
        //var imageObj = new Image();
        //imageObj.onload = function () {
        //    var yoda = new Konva.Image({
        //        x: 50,
        //        y: 50,
        //        image: imageObj,
        //        width: 25,
        //        height: 25,
        //        id: "ValveBox" + ValveBoxName,
        //        draggable: true,
        //    });
        //    ValveBoxName += 1;
        //    // add the shape to the layer
        //    layer.add(yoda);
        //    UndoArray.push(yoda.id());
        //};
        //imageObj.src = '/assets/images/ecommerce/ValveBox.png';
        if (CurrentObjId != null && CurrentObjId != "") {
            if (CurrentObjId[0] == "L") {
                $("#UndoCanvas").click();
            }
            else {
                UnSelectObjOnNew(CurrentObjId);
            }

        }
        else {
            if (OldCurrentObjId != null && OldCurrentObjId != "") {
                UnSelectObj(OldCurrentObjId);
            }
        }

        if (CurretVB != "") {
            var Filter = $(this).attr("data-Filter");
            var DrinkingWater = $(this).attr("data-DrinkingWater");
            var WellWater = $(this).attr("data-WellWater");
            var RainWater = $(this).attr("data-RainWater");
            var SubName = $(this).attr("data-Name");
            var SubId = $(this).attr("data-SubCatId");
            var VBCircle = $(this).attr("data-IrrigationCircles");
            $("#VBCircle").val(VBCircle);
            $("#SName").text(SubName);
            $("#SubCatId").text(SubId);
            if (Filter == "True") {
                $("#VBF").show();
            }
            if (DrinkingWater == "True") {
                $("#VBDW").show();
            }
            if (WellWater == "True") {
                $("#VBWW").show();
            }
            if (RainWater == "True") {
                $("#VBRW").show();
            }



            var UniqueId = CurretVB;

             var OrderId = $("#OrderId").val();


            $("#DeleteObj").hide();


            var model = {
                UniqueId: UniqueId,
                OrderId: OrderId,
            };

            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteOrderDetails", "Customer")",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    $("#TotalAmount").text(r);
                    $("#TotalAmountInput").val(r);
                }
            });

        }
        else {


            var Filter = $(this).attr("data-Filter");
            var DrinkingWater = $(this).attr("data-DrinkingWater");
            var WellWater = $(this).attr("data-WellWater");
            var RainWater = $(this).attr("data-RainWater");
            var VBCircle = $(this).attr("data-IrrigationCircles");
            $("#VBCircle").val(VBCircle);
            var SubName = $(this).attr("data-Name");
            var SubId = $(this).attr("data-SubCatId");
            if (Filter == "True") {
                $("#VBF").show();
            }
            if (DrinkingWater == "True") {
                $("#VBDW").show();
            }
            if (WellWater == "True") {
                $("#VBWW").show();
            }
            if (RainWater == "True") {
                $("#VBRW").show();
            }





            Konva.Image.fromURL(
                '/assets/images/ecommerce/ValveBox.png',
                (img) => {
                    img.setAttrs({
                        x: 50,
                        y: 50,
                        width: 25,
                        height: 25,
                        id: "ValveBox" + ValveBoxName,
                        draggable: true,
                    });
                    img.on('mouseover', (e) => {
                        stage.container().style.cursor = 'move';
                    });

                    img.on('mouseout', (e) => {
                        stage.container().style.cursor = 'default';
                    });
                    layer.add(img);
                    UndoArray.push(img.id());

                    $("#SName").text(SubName);
                    $("#SubCatId").text(SubId);
                    $("#VBId").val(img.id());
                    CurretVB = img.id();
                    CurrentObjId = img.id();
                    // apply default left-top crop
                    //applyCrop('center-middle');

                    const tr = new Konva.Transformer({
                        nodes: [img],
                        keepRatio: true,
                        enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right'],
                        id: img.id().replace("ValveBox", "TVB")
                    });

                    layer.add(tr);
                    tr.anchorCornerRadius(10);
                    tr.rotateEnabled(false);
                }
            );
        }

        $(".VBPD").show();
        $("#EndVB").show();

    });


    $("body").on("click", "#RSP,#Sprinkler1,#Sprinkler2", function () {
        //console.log(CurrentObjId);
        

        if (CurrentObjId != "" && (CurrentObjId[0] != "S" && CurrentObjId[1] != "p")) {
            if (CurrentObjId[0] == "L") {
                $("#UndoCanvas").click();
            }
            else {
                UnSelectObjOnNew(CurrentObjId);
            }
        }
        if (OldCurrentObjId != "" && (OldCurrentObjId[0] != "S" && OldCurrentObjId[1] != "p")) {
            UnSelectObj(OldCurrentObjId);
        }
        $(".RSPD").show();
        var Radius = MToPx(Number($(this).attr("data-radius")));
        var Angle = Number($(this).attr("data-Angle"));
        var Rotation = Number($(this).attr("data-Rotation"));
        var SubName = $(this).attr("data-Name");
        var SubId = $(this).attr("data-SubCatId");
        var MovCirColor = "black";

        if (SubName == "MP 800 90-210") {
            MovCirColor = "#FF0000";
        }
        else if (SubName == "MP 800 360") {
            MovCirColor = "#8FD65A";
        }
        else if (SubName == "MP 1000 90-210") {
            MovCirColor = "#C55A11";
        }
        else if (SubName == "MP 1000 210-270") {
            MovCirColor = "#00B0F0";
        }
        else if (SubName == "MP 1000 360") {
            MovCirColor = "#5DA329";
        }
        else if (SubName == "MP 2000 90-210") {
            MovCirColor = "#000000";
        }
        else if (SubName == "MP 2000 210-270") {
            MovCirColor = "#51DF5F";
        }
        else if (SubName == "MP 2000 360") {
            MovCirColor = "#ED7D31";
        }
        else if (SubName == "MP 3000 90-210") {
            MovCirColor = "#0070C0";
        }
        else if (SubName == "MP 3000 210-270") {
            MovCirColor = "#FEDA01";
        }
        else if (SubName == "MP 3000 360") {
            MovCirColor = "#858062";
        }
        else if (SubName == "MP 3500 90-210") {
            MovCirColor = "#FFC000";
        }
        else if (SubName == "MP Corner") {
            MovCirColor = "#00B0F0";
        }
        //else if (SubName == "MPLCS 515") {
        //    MovCirColor = "#7F7F7F";
        //}
        //else if (SubName == "MPRCS 515") {
        //    MovCirColor = "#CC9900";
        //}
        //else if (SubName == "MPSS 530") {
        //    MovCirColor = "#CC9900";
        //}


        $("#SprinklerTypeDropID").val(SubName);

        if (CurretSprinkler != "") {
            var node = layer.findOne('#' + CurretSprinkler);
            var x = node.x();
            var y = node.y();
            var UniqueId = node.id();
            node.destroy();
            var node = layer.findOne('#' + CurretSprinkler.replace("Sprinkler", "FillCircle"));
            if (node != null) {
                node.destroy();
            }
            var node = layer.findOne('#' + CurretSprinkler.replace("Sprinkler", "Circle"));
            if (node != null) {
                node.destroy();
            }
            var node = layer.findOne('#' + CurretSprinkler.replace("Sprinkler", "Arc"));
            if (node != null) {
                node.destroy();
            }
            var node = layer.findOne('#' + CurretSprinkler.replace("Sprinkler", "MoveCircle"));
            if (node != null) {
                node.destroy();
            }


            var OrderId = $("#OrderId").val();


            var index = UndoArray.indexOf(UniqueId);
            if (index >= 0) {
                UndoArray.splice(index, 1);
            }

            $("#DeleteObj").hide();
            $("#CancleDeleteObj").hide();


            var model = {
                UniqueId: UniqueId,
                OrderId: OrderId,
            };

            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteOrderDetails", "Customer")",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    $("#TotalAmount").text(r);
                    $("#TotalAmountInput").val(r);
                }
            });




            var circle = new Konva.Circle({
                x: x,
                y: y,
                radius: Radius,
                //fill: 'red',
                stroke: 'black',
                strokeWidth: 1,
                id: "Sprinkler" + SprinklerName + "",
                name: "Sprinkler",

            });


            CurretSprinkler = circle.id();

            var cir = new Konva.Circle({
                x: x - circle.radius(),
                y: y,
                radius: 5,
                //fill: 'red',
                stroke: 'black',
                strokeWidth: 1,
                id: circle.id().replace("Sprinkler", "Circle"),
                draggable: true,
            });

            cir.on('mouseover', (e) => {
                stage.container().style.cursor = 'pointer';
            });

            cir.on('mouseout', (e) => {
                stage.container().style.cursor = 'default';
            });

            cir.on('dragmove', (e) => {
                var node = layer.findOne('#' + CurretSprinkler);
                var x = node.x();
                var y = node.y();


                const pos = cir.absolutePosition();
                var x2 = e.target.x();
                var y2 = e.target.y();

                var dx = x - x2;
                var dy = y - y2;
                var Sumsqr = Math.pow(dx, 2);
                Sumsqr += Math.pow(dy, 2);
                var Distance = Math.sqrt(Sumsqr);

                //console.log(PxToM(Distance) + "--- " + scale);
                if (PxToM(Distance) > 2.1) {
                    var radius = 132;
                    var scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
                    if (scale < 1) {


                        cir.x(Math.round((pos.x - x) * scale + x));
                        cir.y(Math.round((pos.y - y) * scale + y));

                    }
                    else {
                        updateSprinkler(e.target.id());
                    }
                }
                else {
                    var radius = 26;

                    var scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
                    if (scale > 1) {


                        cir.x(Math.round((pos.x - x) * scale + x));
                        cir.y(Math.round((pos.y - y) * scale + y));

                    }
                    else {
                        updateSprinkler(e.target.id());
                    }
                }

                cir.moveToTop();

            });

            layer.add(cir);

            var cirFill = new Konva.Circle({
                x: x + circle.radius(),
                y: y,
                radius: 5,
                //fill: 'red',
                stroke: 'black',
                strokeWidth: 1,
                id: circle.id().replace("Sprinkler", "FillCircle"),
                draggable: true,
            });

            cirFill.on('mouseover', (e) => {
                stage.container().style.cursor = 'pointer';
            });

            cirFill.on('mouseout', (e) => {
                stage.container().style.cursor = 'default';
            });


            cirFill.on('dragmove', (e) => {
                var node = layer.findOne('#' + CurretSprinkler);
                var x = node.x();
                var y = node.y();


                const pos = cirFill.absolutePosition();
                var x2 = e.target.x();
                var y2 = e.target.y();

                var dx = x - x2;
                var dy = y - y2;
                var Sumsqr = Math.pow(dx, 2);
                Sumsqr += Math.pow(dy, 2);
                var Distance = Math.sqrt(Sumsqr);

                //console.log(PxToM(Distance) + "--- " + scale);
                if (PxToM(Distance) > 2.1) {
                    var radius = 132;
                    var scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
                    if (scale < 1) {


                        cirFill.x(Math.round((pos.x - x) * scale + x));
                        cirFill.y(Math.round((pos.y - y) * scale + y));

                    }
                    else {
                        updateSprinkler(e.target.id());
                    }
                }
                else {
                    var radius = 26;

                    var scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
                    if (scale > 1) {


                        cirFill.x(Math.round((pos.x - x) * scale + x));
                        cirFill.y(Math.round((pos.y - y) * scale + y));

                    }
                    else {
                        updateSprinkler(e.target.id());
                    }
                }

                cirFill.moveToTop();
            });

            layer.add(cirFill);

            var ArcCir = new Konva.Arc({
                x: x,
                y: y,
                innerRadius: circle.radius(),
                angle: Angle - Rotation,
                fill: 'lightblue',
                stroke: 'black',
                strokeWidth: 0,
                id: circle.id().replace("Sprinkler", "Arc"),
                //draggable: true,
                listening: false,
                rotation: Rotation,
            });


            layer.add(ArcCir);

            var cirMove = new Konva.Circle({
                x: x,
                y: y,
                radius: 5,
                fill: MovCirColor,
                stroke: 'black',
                strokeWidth: 0,
                id: circle.id().replace("Sprinkler", "MoveCircle"),
                draggable: true,
                listening: true,
            });


            cirMove.on('mouseover', (e) => {
                stage.container().style.cursor = 'move';
            });

            cirMove.on('mouseout', (e) => {
                stage.container().style.cursor = 'default';
            });


            cirMove.on('dragmove', (e) => {
                MovCir = layer.findOne('#' + id);
                updateSprinklerMove(e.target.id(), MovCir.x(), MovCir.y());
            });


            layer.add(cirMove);
            cirMove.moveToTop();


        }
        else {
            var circle = new Konva.Circle({
                x:100,
                y:100 ,
                radius: Radius,
                //fill: 'red',
                stroke: 'black',
                strokeWidth: 1,
                id: "Sprinkler" + SprinklerName + "",
                name: "Sprinkler",

            });

            var cir = new Konva.Circle({
                x: 100 - circle.radius(),
                y: 100,
                radius: 5,
                //fill: 'red',
                stroke: 'black',
                strokeWidth: 1,
                id: circle.id().replace("Sprinkler", "Circle"),
                draggable: true,
            });

            cir.on('mouseover', (e) => {
                stage.container().style.cursor = 'pointer';
            });

            cir.on('mouseout', (e) => {
                stage.container().style.cursor = 'default';
            });

            cir.on('dragmove', (e) => {
                var node = layer.findOne('#' + CurretSprinkler);
                var x = node.x();
                var y = node.y();


                const pos = cir.absolutePosition();
                var x2 = e.target.x();
                var y2 = e.target.y();

                var dx = x - x2;
                var dy = y - y2;
                var Sumsqr = Math.pow(dx, 2);
                Sumsqr += Math.pow(dy, 2);
                var Distance = Math.sqrt(Sumsqr);

                //console.log(PxToM(Distance) + "--- " + scale);
                if (PxToM(Distance) > 2.1) {
                    var radius = 132;
                    var scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
                    if (scale < 1) {


                        cir.x(Math.round((pos.x - x) * scale + x));
                        cir.y(Math.round((pos.y - y) * scale + y));

                    }
                    else {
                        updateSprinkler(e.target.id());
                    }
                }
                else {
                    var radius = 26;

                    var scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
                    if (scale > 1) {


                        cir.x(Math.round((pos.x - x) * scale + x));
                        cir.y(Math.round((pos.y - y) * scale + y));

                    }
                    else {
                        updateSprinkler(e.target.id());
                    }
                }

                cir.moveToTop();

            });

            layer.add(cir);

            var cirFill = new Konva.Circle({
                x: 100 + circle.radius(),
                y: 100,
                radius: 5,
                //fill: 'red',
                stroke: 'black',
                strokeWidth: 1,
                id: circle.id().replace("Sprinkler", "FillCircle"),
                draggable: true,
            });

            cirFill.on('mouseover', (e) => {
                stage.container().style.cursor = 'pointer';
            });

            cirFill.on('mouseout', (e) => {
                stage.container().style.cursor = 'default';
            });


            cirFill.on('dragmove', (e) => {



                var node = layer.findOne('#' + CurretSprinkler);
                var x = node.x();
                var y = node.y();


                const pos = cirFill.absolutePosition();
                var x2 = e.target.x();
                var y2 = e.target.y();

                var dx = x - x2;
                var dy = y - y2;
                var Sumsqr = Math.pow(dx, 2);
                Sumsqr += Math.pow(dy, 2);
                var Distance = Math.sqrt(Sumsqr);

                //console.log(PxToM(Distance) + "--- " + scale);
                if (PxToM(Distance) > 2.1) {
                    var radius = 132;
                    var scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
                    if (scale < 1) {


                        cirFill.x(Math.round((pos.x - x) * scale + x));
                        cirFill.y(Math.round((pos.y - y) * scale + y));

                    }
                    else {
                        updateSprinkler(e.target.id());
                    }
                }
                else {
                    var radius = 26;

                    var scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
                    if (scale > 1) {


                        cirFill.x(Math.round((pos.x - x) * scale + x));
                        cirFill.y(Math.round((pos.y - y) * scale + y));

                    }
                    else {
                        updateSprinkler(e.target.id());
                    }
                }

                cirFill.moveToTop();
            });

            layer.add(cirFill);





            var ArcCir = new Konva.Arc({
                x: 100,
                y: 100,
                innerRadius: circle.radius(),
                angle: Angle - Rotation,
                fill: 'rgba(173,216,230,0.7)',
                stroke: 'black',
                strokeWidth: 0,
                id: circle.id().replace("Sprinkler", "Arc"),
                //draggable: true,
                listening: false,
                rotation: Rotation,
            });


            layer.add(ArcCir);


            var cirMove = new Konva.Circle({
                x: 100 ,
                y: 100 ,
                radius: 5,
                fill: MovCirColor,
                stroke: 'black',
                strokeWidth: 0,
                id: circle.id().replace("Sprinkler", "MoveCircle"),
                draggable: true,
                listening: true,
            });

            cirMove.on('mouseover', (e) => {
                stage.container().style.cursor = 'move';
            });

            cirMove.on('mouseout', (e) => {
                stage.container().style.cursor = 'default';
            });

            cirMove.on('dragmove', (e) => {
                MovCir = layer.findOne('#' + id);
                stage.container().style.cursor = 'move';

                updateSprinklerMove(e.target.id(), MovCir.x(), MovCir.y());
            });

            layer.add(cirMove);
            cirMove.moveToTop();


            isOverOnStarting = false;
            isStartLine = true;
            isFinished = false;
            isFirstMouseMove = true;

            isFinished = true;

        }

        //alert(Radius);

        CurretSprinkler = circle.id();

        ////console.log(UndoArray);
        SprinklerName += 1;


            layer.add(circle);

        //alert(poly.name());
        id = circle.id();
        CurrentObjName = circle.name();
        CurrentObjId = circle.id();
        //$("#Area").prop('disabled', true);
        UndoArray.push(circle.id());

        $("#SId").val(circle.id());
        $("#SRadius").val(PxToM(circle.radius()).toFixed(2));
        $("#StartAngle").val(Rotation.toFixed(2));
        $("#SAngle").val(Angle.toFixed(2));
        $("#SName").text(SubName);
        $("#SubCatId").text(SubId);

        //$("#Sprinkler").prop('disabled', true);
        $("#BtnEndsprinkler").show();

        cir.moveToTop();
        cirFill.moveToTop();
        cirMove.moveToTop();
    });

    function PxToM(Val) {

        return (Number(Val) / 12);

    }

    function MToPx(Val) {

        return (Number(Val) * 12);

    }

    $("body").on("click", "#BtnEndsprinkler", function () {

        //$("#Sprinkler").prop('disabled', false);
        //

        var SubCategoryID = $("#SubCatId").text();
        var SubcategoryName = $("#SName").text();
        var UniqueId = $("#SId").val();
        var MinAngle = $("#StartAngle").val();
        var MaxAngle = $("#SAngle").val();
        var ThrowDistanceMax = $("#SRadius").val();
        var OrderId = $("#OrderId").val();

        var node = layer.findOne('#' + UniqueId);
        if (node != null) {
            node.hide();
        }
        var node = layer.findOne('#' + UniqueId.replace("Sprinkler", "FillCircle"));
        if (node != null) {
            node.hide();
        }
        var node = layer.findOne('#' + UniqueId.replace("Sprinkler", "Circle"));
        if (node != null) {
            node.hide();
        }
        var node = layer.findOne('#' + UniqueId.replace("Sprinkler", "MoveCircle"));
        if (node != null) {
            //node.hide();
        } var node = layer.findOne('#' + UniqueId.replace("Sprinkler", "Arc"));
        if (node != null) {
            node.strokeWidth(0.5);
            node.stroke("black");
            node.listening(true);
        }



        $("#BtnEndsprinkler").hide();
        $(".RSPD").hide();
        $("#SName").text("");
        CurretSprinkler = "";


        var model = {
            UniqueId: UniqueId,
            SubCategoryID: SubCategoryID,
            SubcategoryName: SubcategoryName,
            MinAngle: MinAngle,
            MaxAngle: MaxAngle,
            ThrowDistanceMax: ThrowDistanceMax,
            OrderId: OrderId,
        };

        $.ajax({
            type: "POST",
            url: "@Url.Action("AddOrderDetails", "Customer")",
            data: JSON.stringify(model),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (r) {
                $("#TotalAmount").text(r);
                $("#TotalAmountInput").val(r);
                SprinklerCount();
            }
        });
        $("#DeleteObj").hide();
        $("#CancleDeleteObj").hide();

        CurrentObjId = "";

    });

    $("body").on("click", "#EndVB", function () {

        //$("#Sprinkler").prop('disabled', false);
        //

        SubCategoryID = $("#SubCatId").text();
        SubcategoryName = $("#SName").text();
        UniqueId = $("#VBId").val();
        OrderId = $("#OrderId").val();

        $("#EndVB").hide();
        $(".VBPD").hide();
        $("#SName").text("");
        $("#SubCatId").text("");
        //CurretSprinkler = "";
        $("#btn_VB *").prop('disabled', true);


        var model = {
            UniqueId: UniqueId,
            SubCategoryID: SubCategoryID,
            SubcategoryName: SubcategoryName,
            OrderId: OrderId,
        };

        $.ajax({
            type: "POST",
            url: "@Url.Action("AddOrderDetails", "Customer")",
            data: JSON.stringify(model),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (r) {
                $("#TotalAmount").text(r);
                $("#TotalAmountInput").val(r);
            }
        });
        var node = layer.findOne('#' + UniqueId);
        if (node != null) {
            node.off('mouseover');
            node.on('mouseover', (e) => {
                stage.container().style.cursor = 'pointer';
            });
            node.draggable(false);
        }
        var node = layer.findOne('#' + UniqueId.replace("ValveBox", "TVB"));
        if (node != null) {
            node.hide();
        }
        $("#DeleteObj").hide();
        $("#CancleDeleteObj").hide();

        CurrentObjId = "";
    });


    $("body").on("click", "#SSP", function () {
        if (CurrentObjId != null && CurrentObjId != "") {
            if (CurrentObjId[0] == "L") {
                $("#UndoCanvas").click();
            }
            else {
                UnSelectObjOnNew(CurrentObjId);
            }

        }
        else {
            if (OldCurrentObjId != null && OldCurrentObjId != "") {
                UnSelectObj(OldCurrentObjId);
            }
        }
        var RCPX = 0;
        var RCPY = 0;
        $(".SSPD").show();
        var SubName = $(this).attr("data-Name");
        var Width = MToPx(Number($(this).attr("data-Width")));
        var Height = MToPx(Number($(this).attr("data-Height")));
        var SubId = $(this).attr("data-SubCatId");


        if (SubName == "MPLCS 515") {
            RCPY = Height;
            RCPX = 0;
        }
        else if (SubName == "MPRCS 515") {
            RCPY = Height ;
            RCPX = Width;
        }
        else if (SubName == "MPSS 530") {
            RCPY = Height;
            RCPX = (Width / 2);
        }

        if (CurretRSprinkler != "") {
            var node = layer.findOne('#' + CurretRSprinkler);
            var NodeGroup = layer.findOne('#' + CurretRSprinkler.replace("RectangularSprinkler", "RSG"));
            var x = NodeGroup.x();
            var y = NodeGroup.y();
            console.log(NodeGroup);
            console.log(node);
            var UniqueId = node.id();
            node.destroy();
            var node = layer.findOne('#' + CurretRSprinkler.replace("RectangularSprinkler", "TRS"));
            if (node != null) {
                node.destroy();
            }
            var node = layer.findOne('#' + CurretRSprinkler.replace("RectangularSprinkler", "RSCircle"));
            if (node != null) {
                node.destroy();
            }

            var OrderId = $("#OrderId").val();


            var index = UndoArray.indexOf(UniqueId);
            if (index >= 0) {
                UndoArray.splice(index, 1);
            }

            $("#DeleteObj").hide();


            var model = {
                UniqueId: UniqueId,
                OrderId: OrderId,
            };

            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteOrderDetails", "Customer")",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    $("#TotalAmount").text(r);
                    $("#TotalAmountInput").val(r);
                }
            });

            var circle = new Konva.Rect({
                x: 50,
                y: 50,
                width: Width,
                height: Height,
                //fill: 'green',
                stroke: 'black',
                strokeWidth: 1,
                id: "RectangularSprinkler" + RectangularSprinklerName + "",
                name: SubName,
                //draggable: true,

            });

            var group = new Konva.Group({
                draggable: true,
                id: circle.id().replace("RectangularSprinkler", "RSG"),
                x: 50,
                y: 50,
            });


            layer.add(circle);
            //circle.on('pointerclick', (e) => {

            //    ////console.log(e.evt.button);

            //    if (e.evt.button === 0) {
            //        var TSprinkler = layer.findOne('#' + e.target.id().replace("RectangularSprinkler", "TRS"));
            //        TSprinkler.rotateEnabled(true);

            //    }
            //    else if (e.evt.button === 2) {

            //        var TSprinkler = layer.findOne('#' + e.target.id().replace("RectangularSprinkler", "TRS"));
            //        TSprinkler.rotateEnabled(false);
            //    }

            //});
            //circle.on('mouseenter', function () {
            //    stage.container().style.cursor = 'move';
            //});

            //circle.on('mouseleave', function () {
            //    stage.container().style.cursor = 'default';
            //});

            //circle.on('dragmove', (e) => {
            //    //updateRSSprinkler(e.target.id());
            //    var Dx = circle.x() - e.target.x();
            //    var Dy = circle.y() - e.target.y();
            //    var rsc = layer.findOne('#' + e.target.id().replace("RectangularSprinkler", "RSCircle"));
            //    if (Dx == 0) {
            //        rsc.y(rsc.y() + Dy);
            //    }
            //    else if (Dy == 0) {
            //        rsc.x(rsc.x() + Dx);
            //    }
            //    else {
            //        rsc.x(rsc.x() + Dx);
            //        rsc.y(rsc.y() + Dy);
            //    }

            //});

            var cir = new Konva.Circle({
                x: 50 + RCPX,
                y: 50 + RCPY,
                radius: 5,
                //fill: 'red',
                stroke: 'black',
                strokeWidth: 0,
                id: circle.id().replace("RectangularSprinkler", "RSCircle"),
                draggable: true,
            });

            //cir.on('pointerclick', (e) => {

            //    ////console.log(e.evt.button);

            //    if (e.evt.button === 0) {
            //        var Sprinkler = layer.findOne('#' + e.target.id().replace("RSCircle", "RectangularSprinkler"));
            //        Sprinkler.rotation(Sprinkler.rotation() + 1);

            //    }
            //    else if (e.evt.button === 2) {

            //        var Sprinkler = layer.findOne('#' + e.target.id().replace("RSCircle", "RectangularSprinkler"));
            //        Sprinkler.rotation(Sprinkler.rotation() - 1);
            //    }

            //});

            //cir.on('dragmove', (e) => {
            //    //updateRSSprinkler(e.target.id());

            //    var Sprinkler = layer.findOne('#' + e.target.id().replace("RSCircle", "RectangularSprinkler"));
            //    Sprinkler.x(e.target.x());
            //    Sprinkler.y(e.target.y());
            //});

            cir.on('rotationChange', (e) => {
                //updateRSSprinkler(e.target.id());
                var rsid = e.currentTarget.id().replace("RSCircle", "RectangularSprinkler");
                var rs = layer.findOne('#' + rsid);
                rotateAroundPoint(rs, 2, { x: e.currentTarget.x(), y: e.currentTarget.y() });
                //rs.rotation(e.currentTarget.rotation());
                //console.log(rsid);
            });

            layer.add(cir);

            var transformer = new Konva.Transformer({
                nodes: [cir],
                //rotateAnchorOffset: 0,
                //enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right'],
                id: circle.id().replace("RectangularSprinkler", "TRS"),

            });

            transformer.anchorCornerRadius(10);
            transformer.borderEnabled(false);
            transformer.resizeEnabled(false);
            transformer.rotateAnchorOffset(-5);
            transformer.anchorStroke('balck');


            group.on('mouseover', function () {
                stage.container().style.cursor = 'move';
            });
            group.on('mouseout', function () {
                stage.container().style.cursor = 'default';
            });

            group.add(circle);
            group.add(cir);
            cir.moveToTop();
            layer.add(group);
            layer.add(transformer);

        }
        else {
            //alert(Radius);


            var circle = new Konva.Rect({
                x: 50,
                y: 50,
                width: Width,
                height: Height,
                //fill: 'green',
                stroke: 'black',
                strokeWidth: 1,
                id: "RectangularSprinkler" + RectangularSprinklerName + "",
                name: SubName,
                //draggable: true,

            });

            var group = new Konva.Group({
                draggable: true,
                id: circle.id().replace("RectangularSprinkler", "RSG"),
                x: 50,
               y:50,
            });

            layer.add(circle);
            //circle.on('mouseenter', function () {
            //    stage.container().style.cursor = 'move';
            //});

            //circle.on('mouseleave', function () {
            //    stage.container().style.cursor = 'default';
            //});


            //circle.on('dragmove', (e) => {
            //    //updateRSSprinkler(e.target.id());
            //    Circle = layer.findOne('#' + id);
            //    //var Dx = Number(Circle.x()) - Number(e.target.x());
            //    //var Dy = Number(Circle.y()) - Number(e.target.y());
            //    //var rsc = layer.findOne('#' + e.target.id().replace("RectangularSprinkler", "RSCircle"));
            //    //console.log(Dx + " " + Dy);
            //    //if (Dx == 0) {
            //    //    rsc.y(rsc.y() + Dy);
            //    //}
            //    //else if (Dy == 0) {
            //    //    rsc.x(rsc.x() + Dx);
            //    //}
            //    //else {
            //    //    rsc.x(rsc.x() + Dx);
            //    //    rsc.y(rsc.y() + Dy);
            //    //}

            //    //updateRSprinklerMove(e.target.id(), Circle.x(), Circle.y())
            //});


            //circle.on('pointerclick', (e) => {

            //    ////console.log(e.evt.button);

            //    if (e.evt.button === 0) {
            //        var TSprinkler = layer.findOne('#' + e.target.id().replace("RectangularSprinkler", "TRS"));
            //        TSprinkler.rotateEnabled(true);

            //    }
            //    else if (e.evt.button === 2) {

            //        var TSprinkler = layer.findOne('#' + e.target.id().replace("RectangularSprinkler", "TRS"));
            //        TSprinkler.rotateEnabled(false);
            //    }

            //});



            var cir = new Konva.Circle({
                x: 50 + RCPX,
                y: 50 + RCPY,
                radius: 5,
                //fill: 'red',
                stroke: 'black',
                strokeWidth: 1,
                id: circle.id().replace("RectangularSprinkler", "RSCircle"),
                //draggable: true,
            });

            //cir.on('pointerclick', (e) => {

            //    ////console.log(e.evt.button);

            //    if (e.evt.button === 0) {
            //        var Sprinkler = layer.findOne('#' + e.target.id().replace("RSCircle", "RectangularSprinkler"));
            //        Sprinkler.rotation(Sprinkler.rotation() + 1);

            //    }
            //    else if (e.evt.button === 2) {

            //        var Sprinkler = layer.findOne('#' + e.target.id().replace("RSCircle", "RectangularSprinkler"));
            //        Sprinkler.rotation(Sprinkler.rotation() - 1);
            //    }

            //});

            //cir.on('dragmove', (e) => {
            //    //updateRSSprinkler(e.target.id());

            //    var Sprinkler = layer.findOne('#' + e.target.id().replace("RSCircle", "RectangularSprinkler"));
            //    Sprinkler.x(e.target.x());
            //    Sprinkler.y(e.target.y());
            //});

            cir.on('rotationChange', (e) => {
                //updateRSSprinkler(e.target.id());
                var rsid = e.currentTarget.id().replace("RSCircle", "RectangularSprinkler");
                var rs = layer.findOne('#' + rsid);
                rotateAroundPoint(rs, 2, { x: e.currentTarget.x(), y: e.currentTarget.y() });
                //rs.rotation(e.currentTarget.rotation());
                //console.log(rsid);
            });

            layer.add(cir);




            var transformer = new Konva.Transformer({
                nodes: [cir],
                //rotateAnchorOffset: 0,
                //enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right'],
                id: circle.id().replace("RectangularSprinkler", "TRS"),

            });

            transformer.anchorCornerRadius(10);
            transformer.borderEnabled(false);
            transformer.resizeEnabled(false);
            transformer.rotateAnchorOffset(-5);
            transformer.anchorStroke('balck');


            group.on('mouseover', function () {
                stage.container().style.cursor = 'move';
            });
            group.on('mouseout', function () {
                stage.container().style.cursor = 'default';
            });

            //group.on('dragmove', (e) => {
            //    //updateRSSprinkler(e.target.id());
            //    Circle = layer.findOne('#' + id);
            //    Circle.x(e.target.x())
            //    Circle.y(e.target.y())
            //});

            group.add(circle);
            group.add(cir);
            cir.moveToTop();
            layer.add(group);
            layer.add(transformer);


            //transformer.anchorStrokeWidth(0);
            //transformer.offsetX(0);

            //var EditLine = layer.findOne('.rotater_anchor');
            //console.log(EditLine);
        }



        CurretRSprinkler = circle.id();

        ////console.log(UndoArray);
        RectangularSprinklerName += 1;
        //layer.add(circle);
        isOverOnStarting = false;
        isStartLine = true;
        isFinished = false;
        isFirstMouseMove = true;

        id = circle.id();
        CurrentObjName = circle.name();
        CurrentObjId = circle.id();
        UndoArray.push(circle.id());

        $("#SSId").val(circle.id());
        $("#SName").text(SubName);
        $("#SSWidth").val(PxToM(circle.width()).toFixed(2));
        $("#SSHeight").val(PxToM(circle.height()).toFixed(2));
        $("#SubCatId").text(SubId);


        $("#BtnEndRectangularsprinkler").show();

    });


    function rotateAroundPoint(shape, angleDegrees, point) {
        let angleRadians = angleDegrees * Math.PI / 180; // sin + cos require radians

        const x =
            point.x +
            (shape.x() - point.x) * Math.cos(angleRadians) -
            (shape.y() - point.y) * Math.sin(angleRadians);
        const y =
            point.y +
            (shape.x() - point.x) * Math.sin(angleRadians) +
            (shape.y() - point.y) * Math.cos(angleRadians);

        shape.position({ x: x, y: y });  // move the rotated shape in relation to the rotation point.
        shape.rotation(shape.rotation() + angleDegrees); // rotate the shape in place around its natural rotation point

    }

    $("body").on("click", "#BtnEndRectangularsprinkler", function () {

        //$("#Sprinkler").prop('disabled', false);


        SubCategoryID = $("#SubCatId").text();
        SubcategoryName = $("#SName").text();
        UniqueId = $("#SSId").val();
        OrderId = $("#OrderId").val();

        $("#BtnEndRectangularsprinkler").hide();
        $(".SSPD").hide();
        $("#SName").text("");
        CurretRSprinkler = "";


        var model = {
            UniqueId: UniqueId,
            SubCategoryID: SubCategoryID,
            SubcategoryName: SubcategoryName,
            OrderId: OrderId,
        };

        $.ajax({
            type: "POST",
            url: "@Url.Action("AddOrderDetails", "Customer")",
            data: JSON.stringify(model),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (r) {
                $("#TotalAmount").text(r);
                $("#TotalAmountInput").val(r);
                SprinklerCount();
            }
        });

        $("#DeleteObj").hide();
        $("#CancleDeleteObj").hide();

        CurrentObjId = "";
    });


    stage.on('contextmenu', (e) => {
        e.evt.preventDefault();
    });

    function MouseDownHandler(e) {
        //console.log(e.target.offsetX(50));
            ////console.log(this);
            //if (this.pointerClickStartShape != undefined) {
            //    id = this.pointerClickStartShape.attrs.id;
            //    //console.log(id);
            //    //if (id[0]=="R") {
            //    //    id = FindIndex(id);
            //    //}
            //}
            if (isOverOnStarting == false && isFinished == false) {
                if (CurrentObjName == "Sprinkler") {
                    var circle = layer.findOne('#' + id);

                    var Position = stage.getPointerPosition();
                    circle.x(Position.x);
                    circle.y(Position.y);



                    var cir = new Konva.Circle({
                        x: Position.x - circle.radius(),
                        y: Position.y ,
                        radius: 5,
                        //fill: 'red',
                        stroke: 'black',
                        strokeWidth: 1,
                        id: id.replace("Sprinkler","Circle"),
                        draggable: true,
                    });

                    cir.on('dragmove', (e) => {


                        //var sprinkler = layer.findOne('#' + e.target.id().replace("Circle", "Sprinkler"));
                        //// update nodes from the new state
                        //////console.log(e);
                        //e.target.y(sprinkler.y());
                        updateSprinkler(e.target.id());

                    });

                    layer.add(cir);

                    var cirFill = new Konva.Circle({
                        x: Position.x + circle.radius(),
                        y: Position.y ,
                        radius: 5,
                        //fill: 'red',
                        stroke: 'black',
                        strokeWidth: 1,
                        id: id.replace("Sprinkler", "FillCircle"),
                        draggable: true,
                    });

                    cirFill.on('dragmove', (e) => {

                        // update nodes from the new state

                        //var sprinkler = layer.findOne('#' + e.target.id().replace("FillCircle", "Sprinkler"));
                        //var x1 = e.target.x();
                        //var y1 = e.target.y();
                        //var x2 = sprinkler.x();
                        //var y2 = sprinkler.y();

                        //var dx = x1 - x2;
                        //var dy = y1 - y2;
                        //var Sumsqr = Math.pow(dx, 2);
                        //Sumsqr += Math.pow(dy, 2);
                        //var Distance = Math.sqrt(Sumsqr);
                        //var Radius = sprinkler.radius();


                        ////console.log(Distance + " " + Radius);
                        //if (Distance > Radius+3 || Distance < Radius-3) {
                        //    e.target.draggable(false);
                        //    e.target.x(x2 + Radius);
                        //    e.target.y(y2);
                        //}

                        /*//console.log(e);*/
                        //updateSprinkler(e.target.id());



                        //var x1 = 0;
                        //var y1 = 0;
                        //var x2 = 0;
                        //var y2 = 0;
                        //var Sprinkler = layer.findOne('#' + e.target.id().replace("FillCircle", "Sprinkler"));
                        //x1 = e.target.x();
                        //y1 = e.target.y();
                        //x2 = Sprinkler.x();
                        //y2 = Sprinkler.y();
                        //dx = x1 - x2;
                        //dy = y1 - y2;
                        //var angleRad1 = Math.atan2(dy, dx);
                        //var angleDeg1 = angleRad1 * 180 / Math.PI;
                        //angleDeg1 = (360 + (angleDeg1)) % 360;

                        ////console.log("Drag Angle " + angleDeg1);



                        updateSprinkler(e.target.id());


                    });

                    layer.add(cirFill);




                    var ArcCir = new Konva.Arc({
                        x: Position.x,
                        y: Position.y,
                        innerRadius: circle.radius(),
                        angle: 180,
                        fill: 'lightblue',
                        stroke: 'black',
                        strokeWidth: 0,
                        id: id.replace("Sprinkler", "Arc"),
                        //draggable: true,
                        listening: false,
                        rotation: 0,
                    });

                    //var arc = new Konva.Arc({
                    //    x: Position.x,
                    //    y: Position.y - 20,
                    //    innerRadius: circle.radius(),
                    //    angle: 60,
                    //    fill: 'yellow',
                    //    stroke: 'black',
                    //    strokeWidth: 4,
                    //    id: id.replace("Sprinkler", "arc"),
                    //    draggable: true,
                    //});


                    layer.add(ArcCir);


                    isFinished = true;
                }
                else if (CurrentObjName == "RectangularSprinkler")
                {
                    //var circle = layer.findOne('#' + id);

                    //var Position = stage.getPointerPosition();
                    //circle.x(Position.x);
                    //circle.y(Position.y);

                    //var cir = new Konva.Circle({
                    //    x: Position.x ,
                    //    y: Position.y,
                    //    radius: 5,
                    //    //fill: 'red',
                    //    stroke: 'black',
                    //    strokeWidth: 1,
                    //    id: id.replace("RectangularSprinkler", "RSCircle"),
                    //    draggable: true,
                    //});

                    //cir.on('pointerclick', (e) => {

                    //    ////console.log(e.evt.button);

                    //    if (e.evt.button === 0) {
                    //            var Sprinkler = layer.findOne('#' + e.target.id().replace("RSCircle", "RectangularSprinkler"));
                    //            Sprinkler.rotation(Sprinkler.rotation() + 1);

                    //    }
                    //    else if (e.evt.button === 2) {

                    //        var Sprinkler = layer.findOne('#' + e.target.id().replace("RSCircle", "RectangularSprinkler"));
                    //        Sprinkler.rotation(Sprinkler.rotation() - 1);
                    //    }

                    //});

                    //cir.on('dragmove', (e) => {
                    //    //updateRSSprinkler(e.target.id());

                    //    var Sprinkler = layer.findOne('#' + e.target.id().replace("RSCircle", "RectangularSprinkler"));
                    //    Sprinkler.x(e.target.x());
                    //    Sprinkler.y(e.target.y());
                    //});

                    //layer.add(cir);
                    //    var Sprinkler = layer.findOne('#' + id);

                    //var transformer = new Konva.Transformer({
                    //    nodes: [Sprinkler, cir],
                    //    rotateAnchorOffset: 60,
                    //    enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right'],
                    //    id: id.replace("RectangularSprinkler", "TRS")
                    //});
                    //layer.add(transformer);

                    //transformer.anchorCornerRadius(10);
                    //transformer.borderEnabled(false);
                    //transformer.resizeEnabled(false);
                    //transformer.rotateAnchorOffset(0);

                    //transformer.stopTransform(true);
                    //var cirFill = new Konva.Circle({
                    //    x: Position.x ,
                    //    y: Position.y,
                    //    radius: 5,
                    //    //fill: 'red',
                    //    stroke: 'black',
                    //    strokeWidth: 1,
                    //    id: id.replace("Sprinkler", "FillRSCircle"),
                    //    draggable: true,
                    //});

                    //cirFill.on('pointerclick', (e) => {
                    //    e.target.rotation(e.target.rotation + 1);
                    //});

                    //cirFill.on('pointerdblclick', (e) => {
                    //    e.target.rotation(e.target.rotation + 1);
                    //});

                    //cirFill.on('dragmove', (e) => {
                    //    //updateRSSprinkler(e.target.id());
                    //});

                    //layer.add(cirFill);

                    //var ArcCir = new Konva.Arc({
                    //    x: Position.x,
                    //    y: Position.y,
                    //    innerRadius: circle.radius(),
                    //    angle: 180,
                    //    fill: 'lightblue',
                    //    stroke: 'black',
                    //    strokeWidth: 0,
                    //    id: id.replace("Sprinkler", "Arc"),
                    //    //draggable: true,
                    //    listening: false,
                    //    rotation: 0,
                    //});


                    //layer.add(ArcCir);


                    isFinished = true;
                }
                else if (id[0] == 'L') {
                    //console.log("stage.scaleX(): " + stage.scaleX() + "stage.scaleY(): " + stage.scaleY());
                    //console.log(id);
                    var line = layer.findOne('#' + id);
                    console.log(line);
                    //console.log(isInArea);
                    if (isInArea == true || (line.name() != "DryArea" && line.name() != "GetWet")) {
                        //var line = layer.findOne('#' + id);
                        ////console.log(line.id());
                        var points = line.points();
                        if (isStartLine == true ) {

                            points.pop();
                            points.pop();
                            //points.pop();
                            //points.pop();
                        }
                        isDraw = true;
                        var Position = stage.getPointerPosition();
                        //console.log("Before " + + Position.x  + " " + Position.y );
                        //console.log("After " + Position.x / stage.scaleX()+" "+ Position.y / stage.scaleY() );
                        //Points.push(Position.x, Position.y);
                        points.push(Position.x , Position.y);
                        line.points(points);
                        ////console.log(line.points());


                        rect = new Konva.Rect({
                            x: Position.x - 5,
                            y: Position.y - 5,
                            width: 10,
                            height: 10,
                            name: "Rect" + Name + "",
                            id: "Rect" + Name + "",
                            //fill: 'green',
                            stroke: 'red',
                            strokeWidth: 2,
                            draggable: true,
                        });


                        rect.on('mouseover', (e) => {
                            stage.container().style.cursor = 'move';
                        });

                        rect.on('mouseout', (e) => {
                            stage.container().style.cursor = 'default';
                        });

                        if (isStartLine == true) {
                            rect.off('mouseover');
                            rect.on('mouseover', (e) => {
                                stage.container().style.cursor = 'pointer';
                            });

                            StartRect.push(rect.id());

                            isStartLine = false;


                            Srect = new Konva.Rect({
                                x: Position.x - 10,
                                y: Position.y - 10,
                                width: 20,
                                height: 20,
                                name: "SRect" + SRName + "",
                                id: "SRect" + SRName + "",
                                //fill: 'green',
                                stroke: 'red',
                                strokeWidth: 0,
                                draggable: true,
                            });
                            Srect.moveToTop();
                            SRName += 1;
                            Srect.on('pointerenter', function () {
                                //var LineId = this.id().replace('SRect', 'Line');
                                var EditLine = layer.findOne('#' + CurrentObjId);

                                var points = EditLine.points();
                                if ( points.length < 6) {
                                    return;
                                }
                                else {
                                    isOverOnStarting = true;

                                }


                                EditLine.closed(true);
                                if (EditLine.name() == "Area") {
                                    EditLine.fill("rgba(34, 255, 0, 0.3)");

                                }
                                else if (EditLine.name() == "DryArea") {
                                    EditLine.fill("rgba(255,230,153,0.3)");
                                }
                                else if (EditLine.name() == "Hedge") {
                                    EditLine.fill("rgba(210,191,255,0.3)");
                                }
                                else if (EditLine.name() == "GetWet") {
                                    EditLine.fill("rgba(111, 187, 211, 0.3)");
                                }

                            });
                            Srect.on('pointerout', function () {
                                //var LineId = this.id().replace('SRect', 'Line');
                                var EditLine = layer.findOne('#' + CurrentObjId);
                                EditLine.closed(false);
                                isOverOnStarting = false;
                                //EditLine.listening(true);
                                ////console.log(line.name());


                            });

                            layer.add(Srect);
                        }


                        Name += 1;
                        rect.on('pointerenter', function () {
                            var id = this.name();
                            console.log(id);
                            var LineId = 0;
                            if (id[0] == "R") {
                                LineId = FindIndex(id);
                            }
                            console.log(LineId);
                            var line = layer.findOne('#Line' + LineId);
                            //var line = layer.findOne('#' + CurrentObjId);
                            var points = line.points();
                            var pointerPos = stage.getPointerPosition();
                            if (isFinished == true || points.length < 6) {
                                return;
                            }
                            else if (CheckFirstIndex(id)) {
                                //var Rect1 = stage.find('.' + id);
                                isOverOnStarting = true;
                                var index = Number(Number(StartRect.indexOf(this.id())));
                                var NewIndex = Number(Number(index) + 1);
                                var LineId = "Line" + NewIndex;
                                console.log(LineId);
                                var EditLine = layer.findOne('#' + LineId);
                                //var EditLine = layer.findOne('#' + CurrentObjId);
                                EditLine.closed(true);
                                if (EditLine.name() == "Area") {
                                    EditLine.fill("rgba(34, 255, 0, 0.3)");

                                }
                                else if (EditLine.name() == "DryArea") {
                                    EditLine.fill("rgba(255,230,153,0.3)");
                                }
                                else if (EditLine.name() == "Hedge") {
                                    EditLine.fill("rgba(210,191,255,0.3)");
                                }
                                else if (EditLine.name() == "GetWet") {
                                    EditLine.fill("rgba(111, 187, 211, 0.3)");
                                }
                            }

                        });


                        rect.on("pointerout", function () {

                            if (CheckFirstIndex(this.name())) {
                                isOverOnStarting = false;
                                var LineId = this.id().replace('Rect', 'Line');
                                var EditLine = layer.findOne('#' + LineId);
                                //EditLine.closed(false);
                                //layer.batchDraw();
                            }
                        });



                        rect.on('dragmove', (e) => {

                            // update nodes from the new state
                            ////console.log(e);
                            updateObjects(e.target.id());

                        });

                        /*rect.moveToTop();*/

                        layer.add(rect);


                        //var S = line.points();
                        var S = line.points().slice();
                        //if (rect.name()=="Rect2") {
                        //    S.pop();
                        //    S.pop();
                        //}
                        S.pop();
                        S.pop();

                        var x = (S[S.length - 4] + S[S.length - 2]) / 2;
                        var y = (S[S.length - 3] + S[S.length - 1]) / 2;
                        var dx = S[S.length - 2] - S[S.length - 4];
                        var dy = S[S.length - 1] - S[S.length - 3];
                        var Sumsqr = Math.pow(dx, 2);
                        Sumsqr += Math.pow(dy, 2);
                        var Distance = Math.sqrt(Sumsqr);
                        Distance /=  12;
                        Distance = Distance.toFixed(2);
                        var angleRad = Math.atan(dy / dx);
                        var angleDeg = angleRad * 180 / Math.PI;
                        var Text = new Konva.Text({
                            text: Distance+" m",
                            fontSize: 10,
                            fontFamily: 'Calibri',
                            fill: '#000',
                            //width: poly.width(),
                            rotation: angleDeg,
                            padding: -20,
                            y: y,
                            x: x,
                            id: "Text" + TextId + "",
                            listening: false,
                        });

                        TextId += 1;
                        layer.add(Text);
                        //console.log(e);
                        if (line.name() == "Irrigation Wiring") {
                            $("#IWL").val((Number($("#IWL").val()) + Number(Distance)).toFixed(2));
                            rect.draggable(false);
                        }


                        if (line.name() == "PE Pipeline") {
                            $("#PEL").val((Number($("#PEL").val()) + Number(Distance)).toFixed(2));
                            rect.draggable(false);
                        }


                        //poly.moveToBottom();
                        if (CheckFirstIndex(rect.name())) {
                            Rect1 = layer.findOne('.' + rect.name());
                            //rect.moveToTop();
                            Rect1.moveToTop();
                        }
                        isInArea = false;


                    }

                }


            }
            else {
                if (CurrentObjName == "Sprinkler" || CurrentObjName == "RectangularSprinkler") {
                    //var circle = layer.findOne('#' + id);
                    //var Position = stage.getPointerPosition();
                    //circle.x(Position.x);
                    //circle.y(Position.y);


                }
                else {
                    UnSelectObj(CurrentObjId);
                    var LineId = 0;
                    //if (id[0] == "R") {
                    //    LineId = FindIndex(id);
                    //}
                    //else {
                    //    LineId = id[4];
                    //}
                    var line = layer.findOne('#' + id);
                    //var line = layer.findOne('#' + CurrentObjId);
                    //line.points().pop();
                    //line.points().pop();
                    var point1 = 0;
                    var point2 = 0;
                    if (line.name() != "Irrigation Wiring" && line.name() != "PE Pipeline") {
                        isDraw = false;
                        if (isFinished == false) {
                            console.log(isFinished);
                            point1=line.points().pop();
                            point2=line.points().pop();
                            isFinished = true;
                            line.closed(true);
                            var RectID = StartRect[Number(Number(id.replace("Line", "")) - 1)];
                            console.log(RectID);
                            var SRect = layer.findOne('#' + RectID.replace("Rect", "SRect"));
                            if (SRect != null) {
                                console.log(StartRect);
                                //var srecId = StartRect[Number(Number(id.replace("Line", "")) - 1)];
                                console.log(RectID);
                                //var srec = layer.findOne('#' + srecId);
                                var srec = layer.findOne('#' + RectID);
                                srec.off('mouseover');
                                srec.on('mouseover', (e) => {
                                    stage.container().style.cursor = 'move';
                                });
                                SRect.destroy();
                            }
                            line.listening(true);
                            if (line.name() == "Area") {
                                line.fill("rgba(34, 255, 0, 0.3)");
                                $("#Area").css("border", "");
                                $("#Area").css("background-color", "rgb(40, 167, 69,1)");
                                CurrentObjId = "";
                            }
                            else if (line.name() == "DryArea") {
                                line.fill("rgba(255,230,153,0.3)");
                                $("#DryArea").css("border", "");
                                $("#DryArea").css("background-color", "rgb(153, 138, 92,1)");
                                CurrentObjId = "";
                            }
                            else if (line.name() == "Hedge") {
                                line.fill("rgba(210,191,255,0.3)");
                                $("#Hedge").css("border", "");
                                $("#Hedge").css("background-color", "rgb(210, 191, 255,1)");
                                CurrentObjId = "";
                            }
                            else if (line.name() == "GetWet") {
                                line.fill("rgba(111, 187, 211, .3)");
                                $("#GetWet").css("border", "");
                                $("#GetWet").css("background-color", "rgb(111, 187, 211,0.8)");
                                CurrentObjId = "";
                            }
                        }

                    }




                }


                //var CheckPoint = [709.6000366210938, 232.80003356933594];
                //inside(CheckPoint, line.points());

                return;
            }

        }

    function updateObjects(id) {
                    var LineId = 0;
                    var x1 = 0;
                    var y1 = 0;
                    var x2 = 0;
                    var y2 = 0;
                    var node = layer.findOne('#' + id);

                if (id[0] == "R") {
                    LineId = FindIndex(id);
                }
            var line = layer.findOne('#Line' + LineId);
            //console.log(line);
            if (line.name() != "Irrigation Wiring" && line.name() != "PE Pipeline") {
                var points = line.points();
                //line.destroy();
                var ID = Number(id.replace('Rect', ''));
                var MOD = FindMOD(id);
                ////console.log(MOD);
                ////console.log(ID);
                if (CheckFirstIndex(id)) {
                    var Index = 0;
                    if (MOD == 0) {
                        Index = ((ID * 2) - 2);
                    }
                    else {
                        Index = ((ID * 2) - 2) % MOD;
                    }
                    line.closed(false);
                    points[Index] = node.x() + 5;
                    points[Index + 1] = node.y() + 5;
                    //points[points.length - 2] = node.x() + 5;
                    //points[points.length - 1] = node.y() + 5;




                    x1 = Index
                    y1 = Index + 1
                    x2 = Index + 2
                    y2 = Index + 3

                    var TextId = FindDragTextId(id);
                    //console.log(TextId);
                    var EText = layer.findOne('#' + TextId[0]);
                    ////console.log(EText);

                    var S = line.points().slice();

                    x1 = points[x1];
                    x2 = points[x2];
                    y1 = points[y1];
                    y2 = points[y2];
                    var x = (x2 + x1) / 2;
                    var y = (y2 + y1) / 2;
                    var dx = x1 - x2;
                    var dy = y1 - y2;
                    var Sumsqr = Math.pow(dx, 2);
                    Sumsqr += Math.pow(dy, 2);
                    var Distance = Math.sqrt(Sumsqr);
                    Distance /= 12;
                    Distance = Distance.toFixed(2);
                    var angleRad = Math.atan(dy / dx);
                    var angleDeg = angleRad * 180 / Math.PI;

                    EText.text(Distance.toString() + " m");
                    EText.rotation(angleDeg);
                    EText.y(y);
                    EText.x(x);

                    var RectCId = TextId[1].replace('Text', '');
                    MOD = FindMOD(RectCId);
                    ////console.log(MOD);
                    if (MOD == 0) {
                        Index = ((RectCId * 2) - 2);
                    }
                    else {
                        Index = ((RectCId * 2) - 2) % MOD;
                    }
                    //Index = ((RectCId * 2) - 2) % MOD;

                    var EText = layer.findOne('#' + TextId[1]);

                    x1 = 0;
                    y1 =  1;
                    x2 = Index ;
                    y2 = Index + 1;
                    //x2 = Index + 2;
                    //y2 = Index + 3;

                    var S = line.points().slice();

                    x1 = points[x1];
                    x2 = points[x2];
                    y1 = points[y1];
                    y2 = points[y2];
                    var x = (x2 + x1) / 2;
                    var y = (y2 + y1) / 2;
                    var dx = x1 - x2;
                    var dy = y1 - y2;
                    var Sumsqr = Math.pow(dx, 2);
                    Sumsqr += Math.pow(dy, 2);
                    var Distance = Math.sqrt(Sumsqr);
                    Distance /= 12;
                    Distance = Distance.toFixed(2);
                    var angleRad = Math.atan(dy / dx);
                    var angleDeg = angleRad * 180 / Math.PI;

                    EText.text(Distance.toString() + " m");
                    EText.rotation(angleDeg);
                    EText.y(y);
                    EText.x(x);


                    ////console.log(FindDragTextId(id));

                }
                else {
                    //console.log(FindLastId(id));
                    var Index = 0;
                    if (MOD == 0) {
                        Index = ((ID * 2) - 2);
                    }
                    else {
                        Index = ((ID * 2) - 2) % MOD;
                    }
                    line.closed(false);
                    points[Index] = node.x() + 5;
                    points[Index + 1] = node.y() + 5;

                    x1 = Index - 2
                    y1 = Index - 1
                    x2 = Index
                    y2 = Index + 1

                    var TextId = FindDragTextId(id);
                    console.log(TextId);
                    var EText = layer.findOne('#' + TextId[1]);
                    ////console.log(EText);

                    var S = line.points().slice();
                    ////console.log(line.points());
                    //if (rect.name()=="Rect2") {
                    //    S.pop();
                    //    S.pop();
                    //}
                    //S.pop();
                    //S.pop();
                    ////console.log(EText);
                    ////console.log(S.length - 1);
                    ////console.log(S.length - 2);
                    ////console.log(S.length - 3);
                    ////console.log(S.length - 4);
                    //alert(S[S.length - 1]+" = "+S[1]);
                    x1 = points[x1];
                    x2 = points[x2];
                    y1 = points[y1];
                    y2 = points[y2];
                    var x = (x2 + x1) / 2;
                    var y = (y2 + y1) / 2;
                    ////console.log(x);
                    ////console.log(y);
                    var dx = x1 - x2;
                    var dy = y1 - y2;
                    var Sumsqr = Math.pow(dx, 2);
                    Sumsqr += Math.pow(dy, 2);
                    var Distance = Math.sqrt(Sumsqr);
                    Distance /= 12;
                    Distance = Distance.toFixed(2);
                    ////console.log(Distance);
                    var angleRad = Math.atan(dy / dx);
                    var angleDeg = angleRad * 180 / Math.PI;

                    EText.text(Distance.toString() + " m");
                    EText.rotation(angleDeg);
                    EText.y(y);
                    EText.x(x);



                    var TextId = FindDragTextId(id);
                    var EText = layer.findOne('#' + TextId[0]);
                    ////console.log(EText);

                    var S = line.points().slice();
                    var x1 = 0;
                    var y1 = 0;
                    var x2 = 0;
                    var y2 = 0;

                    if (FindLastId(id) == id) {
                         x1 = 0;
                         y1 = 1;
                         x2 = Index;
                         y2 = Index + 1;
                        x1 = points[x1];
                        x2 = points[x2];
                        y1 = points[y1];
                        y2 = points[y2];
                    }
                    else {
                         x1 = Index;
                         y1 = Index + 1;
                         x2 = Index + 2;
                         y2 = Index + 3;
                        x1 = points[x1];
                        x2 = points[x2];
                        y1 = points[y1];
                        y2 = points[y2];

                    }

                    var x = (x2 + x1) / 2;
                    var y = (y2 + y1) / 2;
                    var dx = x1 - x2;
                    var dy = y1 - y2;
                    var Sumsqr = Math.pow(dx, 2);
                    Sumsqr += Math.pow(dy, 2);
                    var Distance = Math.sqrt(Sumsqr);
                    Distance /= 12;
                    Distance = Distance.toFixed(2);
                    var angleRad = Math.atan(dy / dx);
                    var angleDeg = angleRad * 180 / Math.PI;

                    EText.text(Distance.toString() + " m");
                    EText.rotation(angleDeg);
                    EText.y(y);
                    EText.x(x);

                   //console.log(FindDragTextId(id));
                }
                line.closed(true);
            }

     }

    function updateRSprinklerMove(id, x, y) {
        var x1 = 0;
        var y1 = 0;
        var x2 = 0;
        var y2 = 0;
        var Sprinkler = null;
        Sprinkler = layer.findOne('#' + id);
        var rsc = layer.findOne('#' + id.replace("RectangularSprinkler", "RSCircle"));

        //console.log(Sprinkler.height());
        var RCPX = 0;
        var RCPY = 0;
        if (Sprinkler.name() == "MPLCS 515") {
            RCPY = Sprinkler.height();
            RCPX = 0;
        }
        else if (Sprinkler.name() == "MPRCS 515") {
            RCPY = Sprinkler.height();
            RCPX = Sprinkler.width();
        }
        else if (Sprinkler.name() == "MPSS 530") {
            RCPY = Sprinkler.height();
            RCPX = (Sprinkler.width() / 2);
        }

        //MovCir.x(100);
        //MovCir.y(100);
        x1 = Sprinkler.x();
        y1 = Sprinkler.y();
        x2 = Number(rsc.x()) - Number(RCPX);
        y2 = Number(rsc.y()) - Number(RCPY);
        var DifX = Number(x)-Number(x2);
        var DifY = Number(y)-Number(y2);
        console.log(DifX + " - " + DifY);
        if (DifX == 0) {
            rsc.y(rsc.y() + DifY);
        }
        else if (DifY == 0) {
            rsc.x(rsc.x() + DifX);
        }
        else {
            rsc.y(rsc.y() + DifY);
            rsc.x(rsc.x() + DifX);
        }


    }




    function updateSprinklerMove(id,x,y) {
        var x1 = 0;
        var y1 = 0;
        var MovCir = null;

        var Sprinkler = null;
        var FillCir = null;
        var Cir= null;
        var ArcCir= null;
        MovCir = layer.findOne('#' + id);
        Sprinkler = layer.findOne('#' + id.replace("MoveCircle", "Sprinkler"));
        Cir = layer.findOne('#' + id.replace("MoveCircle", "Circle"));
        FillCir = layer.findOne('#' + id.replace("MoveCircle", "FillCircle"));
        ArcCir = layer.findOne('#' + id.replace("MoveCircle", "Arc"));

        //MovCir.x(100);
        //MovCir.y(100);
        x1 = MovCir.x();
        y1 = MovCir.y();
        Sprinkler.x(x1);
        Sprinkler.y(y1);
        ArcCir.x(x1);
        ArcCir.y(y1);
        var DifX = Number(MovCir.x())- Number(x)
        var DifY = Number(MovCir.y())- Number(y)
        console.log(DifX+" - "+DifY);
        if (DifX == 0) {
            Cir.y(Cir.y() + DifY);
            FillCir.y(FillCir.y() + DifY);
        }
        else if (DifY == 0) {
            Cir.x(Cir.x() + DifX);
            FillCir.x(FillCir.x() + DifX);
        }
        else {
            Cir.y(Cir.y() + DifY);
            FillCir.y(FillCir.y() + DifY);
            Cir.x(Cir.x() + DifX);
            FillCir.x(FillCir.x() + DifX);
        }


    }


    function updateSprinkler(id) {
        var LineId = 0;
        var x1 = 0;
        var y1 = 0;
        var x2 = 0;
        var y2 = 0;
        var circle = null;

        var FillCircle = null;
        var Sprinkler = null;
        var ArcCir = null;
        var MovCir = null;
        if (id[0] == "C") {
            circle = layer.findOne('#' + id);
            FillCircle = layer.findOne('#' + id.replace("Circle", "FillCircle"));
            MovCir = layer.findOne('#' + id.replace("Circle", "MoveCircle"));
        }
        else {
             FillCircle= layer.findOne('#' + id);
            circle = layer.findOne('#' + id.replace("FillCircle", "Circle"));
            MovCir = layer.findOne('#' + id.replace("FillCircle", "MoveCircle"));
        }

        if (id[0] == "C") {
            Sprinkler = layer.findOne('#' + id.replace("Circle", "Sprinkler"));
        }
        else {
            Sprinkler = layer.findOne('#' + id.replace("FillCircle", "Sprinkler"));
        }

        if (id[0] == "C") {
            ArcCir = layer.findOne('#' + id.replace("Circle", "Arc"));
        }
        else {
            ArcCir = layer.findOne('#' + id.replace("FillCircle", "Arc"));
        }

        if (id[0] == "C") {
            x1 = circle.x();
            y1 = circle.y();
            x2 = Sprinkler.x();
            y2 = Sprinkler.y();
            ArcCir = layer.findOne('#' + id.replace("Circle", "Arc"));
        }
        else {
            x1 = FillCircle.x();
            y1 = FillCircle.y();
            x2 = Sprinkler.x();
            y2 = Sprinkler.y();
            ArcCir = layer.findOne('#' + id.replace("FillCircle", "Arc"));
        }



        var dx = x1 - x2;
        var dy = y1 - y2;
        var Sumsqr = Math.pow(dx, 2);
        Sumsqr += Math.pow(dy, 2);
        var Distance = Math.sqrt(Sumsqr);
        //Distance = Distance.toFixed(2);
        var oldRadius = Sprinkler.radius();



        //console.log(PxToM(Distance));
        if (PxToM(Distance) >= 2.3 && PxToM(Distance) <= 10.8) {
            Sprinkler.radius(Distance);




            if (id[0] == "C") {

                x1 = FillCircle.x();
                y1 = FillCircle.y();
            }
            else {
                x1 = circle.x();
                y1 = circle.y();
            }





            dx = x1 - x2;
            dy = y1 - y2;


            // Sumsqr = Math.pow(dx, 2);
            //Sumsqr += Math.pow(dy, 2);
            // Distance = Math.sqrt(Sumsqr);
            var angleRad1 = Math.atan2(dy, dx);
            var angleDeg1 = angleRad1 * 180 / Math.PI;
            angleDeg1 = (360 + (angleDeg1)) % 360;
            //var angleRad = Math.atan2(dy , dx);
            //var angleDeg = angleRad * 180 / Math.PI;
            //angleDeg = (360 + (angleDeg)) % 360;

            ////console.log(x1+ " " +x2);
            ////console.log(y1 + " " + y2);

            ////console.log("Angle " + angleDeg1);
            var DiffRadius = Number(Distance - oldRadius).toFixed(5);
            //console.log("Diffin Radius " + DiffRadius);
            ////console.log("Sprinkler.Radius() " + Sprinkler.radius());
            ////console.log("Sprinkler.x() " + Sprinkler.x());
            ////console.log("Sprinkler.y() " + Sprinkler.y());

            if (angleDeg1 == 0) {
                if (id[0] == "C") {

                    FillCircle.x(Sprinkler.x() + Sprinkler.radius());
                }
                else {
                    circle.x(Sprinkler.x() + Sprinkler.radius());
                }

            }
            else if (angleDeg1 == 180) {
                if (id[0] == "C") {

                    FillCircle.x(Sprinkler.x() - Sprinkler.radius());
                }
                else {
                    circle.x(Sprinkler.x() - Sprinkler.radius());
                }

            }
            else if (angleDeg1 == 90) {
                if (id[0] == "C") {

                    FillCircle.y(Sprinkler.y() + Sprinkler.radius());
                }
                else {
                    circle.y(Sprinkler.y() + Sprinkler.radius());
                }
            }
            else if (angleDeg1 == 270) {
                if (id[0] == "C") {

                    FillCircle.y(Sprinkler.y() - Sprinkler.radius());
                }
                else {
                    circle.y(Sprinkler.y() - Sprinkler.radius());
                }

            }
            else if (angleDeg1 < 90) {
                if (id[0] == "C") {
                    var setx = Number(FillCircle.x()) + Number(DiffRadius);
                    var sety = Number(FillCircle.y()) + Number(DiffRadius);
                    ////console.log("Oldx " + FillCircle.x());
                    ////console.log("Oldy " + FillCircle.y());
                    ////console.log("Newx " + setx);
                    ////console.log("Newy " + sety);
                    ////console.log("Diffx " + (setx - FillCircle.x()));
                    ////console.log("Diffy " + (sety - FillCircle.y()));
                    FillCircle.x(setx);
                    FillCircle.y(sety);
                }
                else {
                    var setx = Number(circle.x()) + Number(DiffRadius);
                    var sety = Number(circle.y()) + Number(DiffRadius);
                    circle.x(setx);
                    circle.y(sety);
                }
                ////console.log("FillCircle.x() " + FillCircle.x());
                ////console.log("FillCircle.y() " + FillCircle.y());
            }
            else if (angleDeg1 < 180) {

                if (id[0] == "C") {

                    var setx = Number(FillCircle.x()) - Number(DiffRadius);
                    var sety = Number(FillCircle.y()) + Number(DiffRadius);
                    FillCircle.x(setx);
                    FillCircle.y(sety);
                }
                else {
                    var setx = Number(circle.x()) - Number(DiffRadius);
                    var sety = Number(circle.y()) + Number(DiffRadius);
                    circle.x(setx);
                    circle.y(sety);
                    circle.x(setx);
                }

                //FillCircle.x(Sprinkler.x() - Sprinkler.radius());
                //FillCircle.y(Sprinkler.y() + Sprinkler.radius());
            }
            else if (angleDeg1 < 270) {

                if (id[0] == "C") {

                    var setx = Number(FillCircle.x()) - Number(DiffRadius);
                    var sety = Number(FillCircle.y()) - Number(DiffRadius);
                    FillCircle.x(setx);
                    FillCircle.y(sety);
                }
                else {

                    var setx = Number(circle.x()) - Number(DiffRadius);
                    var sety = Number(circle.y()) - Number(DiffRadius);
                    circle.x(setx);
                    circle.y(sety);
                }
                //FillCircle.x(Sprinkler.x() - Sprinkler.radius());
                //FillCircle.y(Sprinkler.y() - Sprinkler.radius());
            }
            else if (angleDeg1 < 360) {


                if (id[0] == "C") {

                    var setx = Number(FillCircle.x()) + Number(DiffRadius);
                    var sety = Number(FillCircle.y()) - Number(DiffRadius);
                    FillCircle.x(setx);
                    FillCircle.y(sety);
                }
                else {

                    var setx = Number(circle.x()) + Number(DiffRadius);
                    var sety = Number(circle.y()) - Number(DiffRadius);
                    circle.x(setx);
                    circle.y(sety);
                }
                //FillCircle.x(Sprinkler.x() + Sprinkler.radius());
                //FillCircle.y(Sprinkler.y() - Sprinkler.radius());
            }

            x1 = FillCircle.x();
            y1 = FillCircle.y();
            dx = x1 - x2;
            dy = y1 - y2;
            var StartangleRad1 = Math.atan2(dy, dx);
            var StartangleDeg = StartangleRad1 * 180 / Math.PI;
            StartangleDeg = (360 + (StartangleDeg)) % 360;
            //console.log("StartangleDeg "+StartangleDeg);
            ArcCir.rotation(StartangleDeg);

            x1 = circle.x();
            y1 = circle.y();
            dx = x1 - x2;
            dy = y1 - y2;
            angleRad1 = Math.atan2(dy, dx);
            angleDeg1 = angleRad1 * 180 / Math.PI;
            angleDeg1 = (360 + (angleDeg1)) % 360;
            var maxangle = angleDeg1;
            angleDeg1 = angleDeg1 - StartangleDeg;

            ArcCir.innerRadius(Distance);
            ArcCir.angle(angleDeg1);

             var model = {
                 Distance: PxToM(Distance),
                 MinAngle: ArcCir.rotation().toFixed(2),
                 MaxAngle: maxangle,
            };

            $.ajax({
                type: "POST",
                url: "@Url.Action("CheckSpriDis", "Customer")",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    $("#SName").text(r);
                    $("#SprinklerTypeDropID").val(r);

                    var MovCirColor = "black";
                    var SubName = $("#SName").text();
                    if (SubName == "MP 800 90-210") {
                        MovCirColor = "#FF0000";
                    }
                    else if (SubName == "MP 800 360") {
                        MovCirColor = "#8FD65A";
                    }
                    else if (SubName == "MP 1000 90-210") {
                        MovCirColor = "#C55A11";
                    }
                    else if (SubName == "MP 1000 210-270") {
                        MovCirColor = "#00B0F0";
                    }
                    else if (SubName == "MP 1000 360") {
                        MovCirColor = "#5DA329";
                    }
                    else if (SubName == "MP 2000 90-210") {
                        MovCirColor = "#000000";
                    }
                    else if (SubName == "MP 2000 210-270") {
                        MovCirColor = "#51DF5F";
                    }
                    else if (SubName == "MP 2000 360") {
                        MovCirColor = "#ED7D31";
                    }
                    else if (SubName == "MP 3000 90-210") {
                        MovCirColor = "#0070C0";
                    }
                    else if (SubName == "MP 3000 210-270") {
                        MovCirColor = "#FEDA01";
                    }
                    else if (SubName == "MP 3000 360") {
                        MovCirColor = "#858062";
                    }
                    else if (SubName == "MP 3500 90-210") {
                        MovCirColor = "#FFC000";
                    }
                    else if (SubName == "MP Corner") {
                        MovCirColor = "#00B0F0";
                    }
                    MovCir.fill(MovCirColor);
                }
            });



            $("#SId").val(Sprinkler.id());
            $("#SRadius").val(PxToM(Sprinkler.radius()).toFixed(2));
            $("#StartAngle").val(ArcCir.rotation().toFixed(2));

            $("#SAngle").val(maxangle.toFixed(2));


            ////console.log("FillCircle Radius " + angleDeg1);

            //FillCircle.x(Sprinkler.x() + Sprinkler.radius());
        }
        else {
            if (PxToM(Distance) > 4.1) {
                circle.x(circle.x()-0.1);
                circle.y(circle.y() - 0.1);
                //ArcCir.draggable(false);
                FillCircle.x(FillCircle.x()+0.1);
                FillCircle.y(FillCircle.y() + 0.1);
            }
            else if (PxToM(Distance) > 2.1){

            }

        }
    }


    function updateRSSprinkler(id) {
        var LineId = 0;
        var x1 = 0;
        var y1 = 0;
        var x2 = 0;
        var y2 = 0;
        var circle = null;

        var FillCircle = null;
        var Sprinkler = null;
        var ArcCir = null;
        if (id[0] == "C") {
            circle = layer.findOne('#' + id);
            FillCircle = layer.findOne('#' + id.replace("RSCircle", "FillRSCircle"));
        }
        else {
             FillCircle= layer.findOne('#' + id);
            circle = layer.findOne('#' + id.replace("FillRSCircle", "RSCircle"));
        }

        if (id[0] == "C") {
            Sprinkler = layer.findOne('#' + id.replace("RSCircle", "RectangularSprinkler"));
        }
        else {
            Sprinkler = layer.findOne('#' + id.replace("FillRSCircle", "RectangularSprinkler"));
        }

        //if (id[0] == "C") {
        //    ArcCir = layer.findOne('#' + id.replace("Circle", "Arc"));
        //}
        //else {
        //    ArcCir = layer.findOne('#' + id.replace("FillCircle", "Arc"));
        //}

        if (id[0] == "C") {
            x1 = circle.x();
            y1 = circle.y();
            x2 = Sprinkler.x();
            y2 = Sprinkler.y();
            //ArcCir = layer.findOne('#' + id.replace("Circle", "Arc"));

            var dx = x1 - x2;
            var dy = y1 - y2;
            var Sumsqr = Math.pow(dx, 2);
            Sumsqr += Math.pow(dy, 2);
            var Distance = Math.sqrt(Sumsqr);
            //Distance = Distance.toFixed(2);
            //var oldRadius = Sprinkler.radius();
            Sprinkler.width(Distance);
        }
        else {
            x1 = FillCircle.x();
            y1 = FillCircle.y();
            x2 = Sprinkler.x();
            y2 = Sprinkler.y();
            //ArcCir = layer.findOne('#' + id.replace("FillCircle", "Arc"));


            var dx = x1 - x2;
            var dy = y1 - y2;

            var angleRad1 = Math.atan2(dy, dx);
            var angleDeg1 = angleRad1 * 180 / Math.PI;
            angleDeg1 = (360 + (angleDeg1)) % 360;
            var DiffRadius = Number(Distance - oldRadius).toFixed(5);
        }






        //if (id[0] == "C") {

        //    x1 = FillCircle.x();
        //    y1 = FillCircle.y();
        //}
        //else {
        //    x1 = circle.x();
        //    y1 = circle.y();
        //}









        x1 = FillCircle.x();
        y1 = FillCircle.y();
        dx = x1 - x2;
        dy = y1 - y2;
        var StartangleRad1 = Math.atan2(dy, dx);
        var StartangleDeg = StartangleRad1 * 180 / Math.PI;
        StartangleDeg = (360 + (StartangleDeg)) % 360;
        //console.log("StartangleDeg "+StartangleDeg);
        ArcCir.rotation(StartangleDeg);

        x1 = circle.x();
        y1 = circle.y();
        dx = x1 - x2;
        dy = y1 - y2;
         angleRad1 = Math.atan2(dy, dx);
         angleDeg1 = angleRad1 * 180 / Math.PI;
        angleDeg1 = (360 + (angleDeg1)) % 360;
        angleDeg1 = angleDeg1 - StartangleDeg;

        ArcCir.innerRadius(Distance);
        ArcCir.angle(angleDeg1);

        //$("#SId").val(Sprinkler.id());
        //$("#SRadius").val(Sprinkler.radius().toFixed(2));
        //$("#StartAngle").val(ArcCir.rotation().toFixed(2));

        //$("#SAngle").val(ArcCir.angle().toFixed(2));
    }

        //function handleMouseOverStartPoint () {
            //    if (isFinished || Points.length < 3) {
            //        alert();
            //        return;
            //    }
            //    else
            //    {
            //        //rect.scale(2, 2);
            //        rect.fill("red");
            //        //layer.batchDraw();
            //    }
            //};

            function MouseMoveHandler() {
                //  //var id = 0;
                if (!isDraw) {
                    //poly.closed = true;
                    return false;
                }
                else {
                    //if (this.mouseClickStartShape != undefined) {

                    //    id = this.mouseClickStartShape.attrs.id;
                    //}
                    console.log(CurrentObjId);
                    var line = layer.findOne('#' + id);
                    if (isOutArea == false || line.name() == "Hedge" || line.name() == "Irrigation Wiring" || line.name() == "PE Pipeline") {

                        var points = line.points();
                        if (isFirstMouseMove == false) {
                            points.pop();
                            points.pop();
                        }

                        var TextId = FindTextId(rect.id());
                        var EText = layer.findOne('#' + TextId);





                        var CPoints = [];
                        //var line = layer.findOne('#Line');
                        //var points = line.points();
                        Position = stage.getPointerPosition();


                        var S = line.points().slice();
                        //if (rect.name()=="Rect2") {
                        //    S.pop();
                        //    S.pop();
                        //}
                        //S.pop();
                        //S.pop();
                        //alert(S[S.length - 1]+" = "+S[1]);

                        var x = (Position.x + S[S.length - 2]) / 2;
                        var y = (Position.y + S[S.length - 1]) / 2;
                        var dx = S[S.length - 2] - Position.x;
                        var dy = S[S.length - 1] - Position.y;
                        var Sumsqr = Math.pow(dx, 2);
                        Sumsqr += Math.pow(dy, 2);
                        var Distance = Math.sqrt(Sumsqr);
                        Distance /= 12;
                        Distance = Distance.toFixed(2);
                        //var angleRad = Math.atan(dy / dx);
                        var angleRad = Math.atan(dy/ dx);
                        var angleDeg = angleRad * 180 / Math.PI;
                        //angleDeg = (360 + (angleDeg)) % 360;
                        EText.text(Distance.toString() + " m");
                        EText.rotation(angleDeg);
                        EText.y(y);
                        EText.x(x);


                        //points.push(Position.x, Position.y);
                        points.push(Position.x, Position.y);
                        CPoints = points.slice();
                        line.points(CPoints);
                        isFirstMouseMove = false;
                        //layer.batchDraw();

                        //line.points(CPoints);
                    }


                }
            }

        function FindMOD(id) {
            var RetIndex = "";
        id = id.replace('Rect', '');
        var CStartRect = StartRect.slice();
        for (var i = 0; i < StartRect.length; i++) {
            CStartRect[i] = CStartRect[i].replace('Rect', '');
        if (Number(CStartRect[i]) === Number(id)) {
            RetIndex = CStartRect[i];
                }
        else {
                    if (Number(id) > Number(CStartRect[i])) {
            RetIndex = CStartRect[i];
                    }
                }
            }
        var Mod = (Number(RetIndex) * 2) - 2;
        return Mod;
        }


        function FindTextId(id) {
            var RectId = id.replace('Rect', '');
        var TextId = "Text" + RectId;
        return TextId;

        }


        function FindDragTextId(id) {

            var TextIds = [];
        var RectId = Number(id.replace('Rect', ''));
        TextIds.push("Text" + RectId);
        if (CheckFirstIndex(id)) {
            ////console.log();
            var LastIndex = FindLastId(id)
            //console.log(id);
            //console.log(LastIndex);
            TextIds.push("Text" + LastIndex.replace('Rect', ''));
            }
        else {
            TextIds.push("Text" + (RectId - 1));
            }

        return TextIds;

        }


        function FindLastId(id) {
            var RetIndex = 0;
        id = id.replace('Rect', '');
        var CStartRect = StartRect.slice();
            for (var i = 0; i < StartRect.length; i++) {
                CStartRect[i] = CStartRect[i].replace('Rect', '');
                if (Number(CStartRect[i]) > Number(id)) {

                    var RetId = "Rect" + (Number(CStartRect[i]) - 1);
                    //console.log("RetId " + RetId);
                     return RetId;
                }
                RetIndex = i;
            }
        var RetId = "Rect" + (Name - 1);
            //alert(Name);

        return RetId;
        }



    function FindIndex(id) {
        var ID = '';
        if (id[0] == "R") {
            ID = id.replace('Rect', '');
        }
        else {
            ID = id.replace('SRect', '');
        }

            var RetIndex = 0;
            var CStartRect = StartRect.slice();
            for (var i = 0; i < StartRect.length; i++) {
                CStartRect[i] = CStartRect[i].replace('Rect', '');
                if (Number(CStartRect[i]) == Number(ID)) {

                    return i + 1;
                }
                else {
                    if (Number(ID) > Number(CStartRect[i]))
                    {
                        RetIndex = i + 1;
                    }
                }
            }
            return RetIndex;
        }


    function CheckFirstIndex(id) {
        //console.log("AAA "+id);
        if (id[0]=="S") {
            id=id.replace('SRect', 'Rect');
        }
            for (var i = 0; i < StartRect.length; i++) {
                if (StartRect[i] == id) {
                    return true;
                }
            }
        return false;
        }

    function MakeCopy() {
        var myShape = layer.findOne('#' + OldCurrentObjId);
        if(myShape != null && myShape!="")
        {
            var myShapeCopy = myShape.clone();
            myShapeCopy.x(50);
            // Add the copy to the stage
            layer.add(myShapeCopy);
            //layer.draw();
        }

    }


    function RemoveAll() {
        while (UndoArray.length!=0) {
            $("#UndoCanvas").click();
        }
    }


    $("body").on("click", "#UndoCanvas", function () {

        if (UndoArray.length > 0) {
            var CLastId = UndoArray[UndoArray.length - 1];
            //console.log(CLastId);
            if (CLastId =="UploadImg") {
                $("#file_input").prop('disabled', false);
                var node = layer.findOne('#' + CLastId.replace("UploadImg", "TUploadImg"));
                if (node != null) {
                    node.destroy();
                    $(".DivImageOpacityValue").hide();
                    $("#file_input").val("");
                }
            }
            var FirstId = "";
            var LastId = "";

            if (CLastId[0] == 'L') {
                isDraw = false;
                var temp = Number(CLastId.replace("Line", ""));
                FirstId = StartRect[temp - 1];
                console.log(FirstId);
                if (FirstId != undefined && FirstId != "") {
                    LastId = FindLastId(FirstId);
                    var CheckId = layer.findOne('#' + CLastId);
                    for (var i = Number(FirstId.replace("Rect", "")); i <= Number(LastId.replace("Rect", "")); i++) {
                        var node = layer.findOne('#Rect' + i);
                        node.destroy();

                        if (CheckId.name() == "Irrigation Wiring" && i == Number(LastId.replace("Rect", ""))) {
                            $("#btn_IW *").prop('disabled', false);
                        }
                        else if (CheckId.name() == "PE Pipeline" && i == Number(LastId.replace("Rect", ""))) {
                            $("#btn_PE *").prop('disabled', false);
                        }
                        else {
                            node = layer.findOne('#Text' + i);
                            node.destroy();
                        }

                    }
                }
                else {
                    PolyName -= 1;
                }
                

                isOutArea = false;
            }
            else if (CLastId[0] == 'S' && CLastId[1] == 'p') {

                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "FillCircle"));
                if (node != null) {
                    if (CurretSprinkler != "") {
                        CurretSprinkler = "";
                    }
                    $("#SName").text("");
                    $(".RSPD").hide();
                    node.destroy();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "Circle"));
                if (node != null) {
                    node.destroy();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "Arc"));
                if (node != null) {
                    node.destroy();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "MoveCircle"));
                if (node != null) {
                    node.destroy();
                }

            }
            else if (CLastId[0] == 'R' && CLastId[1] == 'e') {

                var node = layer.findOne('#' + CLastId.replace("RectangularSprinkler", "RSCircle"));
                if (node != null) {
                    if (CurretRSprinkler != "") {
                        CurretRSprinkler = "";
                    }
                    $("#SName").text("");
                    $(".SSPD").hide();
                    node.destroy();
                }
                var node = layer.findOne('#' + CLastId.replace("RectangularSprinkler", "TRS"));
                if (node != null) {
                    node.destroy();
                }

            }
            else if (CLastId[0] == 'S' && CLastId[1] == 'y') {
                var node = layer.findOne('#' + CLastId.replace("System", "TIC"));
                $("#SName").text("");
                $(".ICPD").hide();
                if (node != null) {
                    if (CurretIC != "") {
                        CurretIC = "";
                    }
                    $("#btn_IC *").prop('disabled', false);
                    node.destroy();
                }
            }
            else if (CLastId[0] == 'V') {


                var node = layer.findOne('#' + CLastId.replace("ValveBox", "TVB"));

                $("#SName").text("");
                $(".VBPD").hide();
                if (node != null) {
                    if (CurretVB != "") {
                        CurretVB = "";
                    }
                    $("#btn_VB *").prop('disabled', false);
                    node.destroy();
                }
            }
            else if (CLastId[0] == 'T' && CLastId[1] == 'a') {
                var node = layer.findOne('#' + CLastId.replace("Tap", "TTap"));
                $("#SName").text("");
                $(".TapPD").hide();
                if (node != null) {
                    if (CurretTap != "") {
                        CurretTap = "";
                    }
                    $("#btn_TAP *").prop('disabled', false);
                    node.destroy();
                }
            }
            var node = layer.findOne('#' + CLastId);

            if (node.name() == "Area") {
                $("#Area").css("border", "");
                $("#Area").css("background-color", "rgb(40, 167, 69,1)");
                CurrentObjId = "";
            }
            else if (node.name() == "DryArea") {
                $("#DryArea").css("border", "");
                $("#DryArea").css("background-color", "rgb(153, 138, 92,1)");
                CurrentObjId = "";
            }
            else if (node.name() == "Hedge") {
                $("#Hedge").css("border", "");
                $("#Hedge").css("background-color", "rgb(210, 191, 255,1)");
                CurrentObjId = "";
            }
            else if (node.name() == "GetWet") {
                $("#GetWet").css("border", "");
                $("#GetWet").css("background-color", "rgb(111, 187, 211,0.8)");
                CurrentObjId = "";
            }
            if (node.name() =="Area" ) {
                $("#Area").prop('disabled', false);
            }
            if (node != null) {
                node.destroy();
            }

            var UniqueId = CLastId;
            var OrderId = $("#OrderId").val();


            UndoArray.pop();

            var model = {
                UniqueId: UniqueId,
                OrderId: OrderId,
            };

            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteOrderDetails", "Customer")",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    $("#TotalAmount").text(r);
                    $("#TotalAmountInput").val(r);
                    SprinklerCount();
                }
            });
            $("#DeleteObj").hide();
            $("#CancleDeleteObj").hide();
            $("#SName").text("");
            $("#ObjUniqueId").val("");

            OldCurrentObjId = "";
            CurrentObjId = "";
        }

    });



    $("body").on("click", "#DeleteObj ", function () {
        //if (OldCurrentObjId != null && OldCurrentObjId != "") {
        //    UnSelectObj(OldCurrentObjId);
        //}
        //if (CurrentObjId != null && CurrentObjId != "") {
        //    UnSelectObjOnNew(CurrentObjId);
        //}
        var ObjId = $("#ObjUniqueId").val();
        if (ObjId != "") {

            var index = UndoArray.indexOf(ObjId);
            if (index >= 0) {
                UndoArray.splice(index, 1);
            }

            var CLastId = ObjId;
            if (CLastId == "UploadImg") {
                $("#file_input").prop('disabled', false);
                var node = layer.findOne('#' + CLastId.replace("UploadImg", "TUploadImg"));
                if (node != null) {

                    node.destroy();
                    $("#SName").text("");
                    $("#file_input").val("");
                    $(".DivImageOpacityValue").hide();
                }
            }


            var FirstId = "";
            var LastId = "";

            if (CLastId[0] == 'L') {
                var temp = Number(CLastId.replace("Line", ""));
                FirstId = StartRect[temp - 1];
                LastId = FindLastId(FirstId);


                //for (var i = Number(FirstId.replace("Rect", "")); i <= Number(LastId.replace("Rect", "")); i++) {
                //    var node = layer.findOne('#Rect' + i);
                //    node.destroy();
                //    node = layer.findOne('#Text' + i);
                //    node.destroy();

                //}

                var CheckId = layer.findOne('#' + CLastId);
                for (var i = Number(FirstId.replace("Rect", "")); i <= Number(LastId.replace("Rect", "")); i++) {
                    var node = layer.findOne('#Rect' + i);
                    node.destroy();
                    if (CheckId.name() == "Irrigation Wiring" && i == Number(LastId.replace("Rect", ""))) {
                        $("#btn_IW *").prop('disabled', false);
                        $(".IWPD").hide();
                    }
                    else if (CheckId.name() == "PE Pipeline" && i == Number(LastId.replace("Rect", ""))) {
                        $("#btn_PE *").prop('disabled', false);
                        $(".PEPD").hide();
                    }
                    else {
                        node = layer.findOne('#Text' + i);
                        node.destroy();
                    }
                }
                $("#SName").text("");
                isOutArea = false;

            }
            else if (CLastId[0] == 'S' && CLastId[1] == 'p') {

                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "FillCircle"));
                if (node != null) {
                    if (CurretSprinkler != "") {
                        CurretSprinkler = "";
                    }

                    $("#SName").text("");
                    $(".RSPD").hide();
                    node.destroy();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "Circle"));
                if (node != null) {
                    node.destroy();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "Arc"));
                if (node != null) {
                    node.destroy();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "MoveCircle"));
                if (node != null) {
                    node.destroy();
                }

            }
            else if (CLastId[0] == 'R' && CLastId[1] == 'e') {

                var node = layer.findOne('#' + CLastId.replace("RectangularSprinkler", "RSCircle"));
                if (node != null) {
                    if (CurretRSprinkler != "") {
                        CurretRSprinkler = "";
                    }
                    $("#SName").text("");
                    $(".SSPD").hide();
                    node.destroy();
                }
                var node = layer.findOne('#' + CLastId.replace("RectangularSprinkler", "TRS"));
                if (node != null) {
                    node.destroy();
                }

            }
            else if (CLastId[0] == 'S' && CLastId[1] == 'y') {
                var node = layer.findOne('#' + CLastId.replace("System", "TIC"));
                $("#SName").text("");
                $(".ICPD").hide();
                if (node != null) {
                    if (CurretIC != "") {
                        CurretIC = "";
                    }
                    $("#btn_IC *").prop('disabled', false);
                    node.destroy();
                }
            }
            else if (CLastId[0] == 'V') {


                var node = layer.findOne('#' + CLastId.replace("ValveBox", "TVB"));

                $("#SName").text("");
                $(".VBPD").hide();
                if (node != null) {
                    if (CurretVB != "") {
                        CurretVB = "";
                    }
                    $("#btn_VB *").prop('disabled', false);
                    node.destroy();
                }
            }
            else if (CLastId[0] == 'T' && CLastId[1] == 'a') {
                var node = layer.findOne('#' + CLastId.replace("Tap", "TTap"));
                $("#SName").text("");
                $(".TapPD").hide();
                if (node != null) {
                    if (CurretTap != "") {
                        CurretTap = "";
                    }
                    $("#btn_TAP *").prop('disabled', false);
                    node.destroy();
                }
            }
            var node = layer.findOne('#' + CLastId);
            if (node.name() =="Area" ) {
                $("#Area").prop('disabled', false);
            }
            if (node != null) {
                node.destroy();
            }

            var UniqueId = CLastId;
            var OrderId = $("#OrderId").val();




            var model = {
                UniqueId: UniqueId,
                OrderId: OrderId,
            };

            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteOrderDetails", "Customer")",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    $("#TotalAmount").text(r);
                    $("#TotalAmountInput").val(r);
                    SprinklerCount();
                }
            });



            $("#DeleteObj").hide();
            $("#CancleDeleteObj").hide();
            $("#ObjUniqueId").val("");

            OldCurrentObjId = "";
            CurrentObjId = "";

        }

    });


    $("body").on("click", "#CancleDeleteObj", function () {
        var ObjId = $("#ObjUniqueId").val();

        if (ObjId != "") {


            var CLastId = ObjId;
            if (CLastId == "UploadImg") {
                $("#SName").text("");
                $(".DivImageOpacityValue").hide();
                node = layer.findOne('#' + CLastId);
                node.draggable(false);
                node = layer.findOne('#' + CLastId.replace("UploadImg", "TUploadImg"));
                node.hide();
            }


            if (CLastId[0] == 'L') {



                var temp = Number(CLastId.replace("Line", ""));
                FirstId = StartRect[temp - 1];
                LastId = FindLastId(FirstId);


                var CheckId = layer.findOne('#' + CLastId);
                for (var i = Number(FirstId.replace("Rect", "")); i <= Number(LastId.replace("Rect", "")); i++) {
                    var node = layer.findOne('#Rect' + i);
                    node.hide();
                    if (CheckId.name() == "Irrigation Wiring" && i == Number(LastId.replace("Rect", ""))) {
                        $(".IWPD").hide();
                    }
                    else if (CheckId.name() == "PE Pipeline" && i == Number(LastId.replace("Rect", ""))) {

                        $(".PEPD").hide();
                    }
                    else {
                        node = layer.findOne('#Text' + i);
                        node.hide();
                    }
                }
                $("#SName").text("");
                isOutArea = false;

            }
            else if (CLastId[0] == 'S' && CLastId[1] == 'p') {

                if (CurretSprinkler != "") {
                    CurretSprinkler = "";
                }

                var node = layer.findOne('#' + CLastId);
                if (node != null) {
                    node.hide();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "FillCircle"));
                if (node != null) {
                    node.hide();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "Circle"));
                if (node != null) {
                    node.hide();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "MoveCircle"));
                if (node != null) {
                    node.hide();
                } var node = layer.findOne('#' + CLastId.replace("Sprinkler", "Arc"));
                if (node != null) {
                    node.listening(true);
                }


                $("#SName").text("");
                $(".RSPD").hide();

            }
            else if (CLastId[0] == 'R' && CLastId[1] == 'e') {
                if (CurretRSprinkler != "") {
                    CurretRSprinkler = "";
                }
                $("#SName").text("");
                $(".SSPD").hide();

            }
            else if (CLastId[0] == 'S' && CLastId[1] == 'y') {
                if (CurretIC != "") {
                    CurretIC = "";
                }
                $("#SName").text("");
                $(".ICPD").hide();
                node = layer.findOne('#' + CLastId);
                node.off('mouseover');
                node.on('mouseover', (e) => {
                    stage.container().style.cursor = 'pointer';
                });
                node.draggable(false);
                node = layer.findOne('#' + CLastId.replace("System", "TIC"));
                node.hide();
            }
            else if (CLastId[0] == 'V') {
                if (CurretVB != "") {
                    CurretVB = "";
                }
                $("#SName").text("");
                $(".VBPD").hide();
                node = layer.findOne('#' + CLastId);
                node.off('mouseover');
                node.on('mouseover', (e) => {
                    stage.container().style.cursor = 'pointer';
                });
                node.draggable(false);
                node = layer.findOne('#' + CLastId.replace("ValveBox", "TVB"));
                node.hide();
            }
            else if (CLastId[0] == 'T' && CLastId[1] == 'a') {
                if (CurretTap != "") {
                    CurretTap = "";
                }
                $("#SName").text("");
                $(".TapPD").hide();
                node = layer.findOne('#' + CLastId);
                node.off('mouseover');
                node.on('mouseover', (e) => {
                    stage.container().style.cursor = 'pointer';
                });
                node.draggable(false);
                node = layer.findOne('#' + CLastId.replace("Tap", "TTap"));
                node.hide();
            }
            var node = layer.findOne('#' + CLastId);
            if (node.name() =="Area" ) {
                $("#Area").prop('disabled', false);
            }

            $("#DeleteObj").hide();
            $("#CancleDeleteObj").hide();
            $("#ObjUniqueId").val("");
            $("#SName").text("");
            OldCurrentObjId = "";
        }




    });



    function SetS(obj, Type) {
        if (Type<=3) {
            var SAID = $("#SId").val().replace("Sprinkler", "Arc");
            var SID = $("#SId").val();
            var SCID = $("#SId").val().replace("Sprinkler", "Circle");
            var SFCID = $("#SId").val().replace("Sprinkler", "FillCircle");
            var x1 = 0;
            var y1 = 0;
            var x2 = 0;
            var y2 = 0;
            var Sprinkler = layer.findOne('#' + SID);
            var ArcCir = layer.findOne('#' + SAID);
            var circle = layer.findOne('#' + SCID);
            var FillCircle = layer.findOne('#' + SFCID);
            if (Type == 1) {
                var oldRadius = Sprinkler.radius();

                ArcCir.innerRadius(MToPx(obj.value));
                Sprinkler.radius(MToPx(obj.value));
                var Distance = Sprinkler.radius();
                //var radius = Sprinkler.radius();
                x2 = Sprinkler.x();
                y2 = Sprinkler.y();

                x1 = circle.x();
                y1 = circle.y();


                dx = x1 - x2;
                dy = y1 - y2;


                var angleRad1 = Math.atan2(dy, dx);
                angleDeg1 = angleRad1 * 180 / Math.PI;
                angleDeg1 = (360 + (angleDeg1)) % 360;

                var DiffRadius = Number(Distance) - Number(oldRadius);
                //console.log("Diffin Radius " + DiffRadius);
                //console.log("Diffin Radius " + angleDeg1);


                SetWithangle(angleDeg1, DiffRadius, circle, Sprinkler);

                x1 = FillCircle.x();
                y1 = FillCircle.y();


                dx = x1 - x2;
                dy = y1 - y2;


                angleRad1 = Math.atan2(dy, dx);
                angleDeg1 = angleRad1 * 180 / Math.PI;
                angleDeg1 = (360 + (angleDeg1)) % 360;
                //console.log("Diffin Radius " + DiffRadius);
                ////console.log("Diffin Radius " + angleDeg1);


                SetWithangle(angleDeg1, DiffRadius, FillCircle, Sprinkler);




            }
            else if (Type == 2) {
                var StartAngle = $("#StartAngle").val();
                var EndAngle = $("#SAngle").val();

                ArcCir.rotation(StartAngle.replace(",","."));
                ArcCir.angle(Number((Number(EndAngle) - Number(StartAngle.replace(",", ".")))));



                //var radius = 60;
                //var angle = 140;
                //var x = radius * Math.sin(Math.PI * 2 * angle / 360);
                //var y = radius * Math.cos(Math.PI * 2 * angle / 360);
                ////console.log('Points coors are  x=' +
                //    Math.round(x * 100) / 100 + ', y=' +
                //    Math.round(y * 100) / 100);


            }
            else if (Type == 3) {
                var StartAngle = $("#StartAngle").val();
                var EndAngle = $("#SAngle").val();
                ArcCir.angle(EndAngle.replace(",", ".") - StartAngle);
            }
        }
        else if (Type<=5)
        {
            var SSID = $("#SSId").val();
            var Sprinkler = layer.findOne('#' + SSID);
            if (Type == 4) {
                Sprinkler.width(MToPx(obj.value));
            }
            else if (Type == 5) {
                Sprinkler.height(MToPx(obj.value));
            }
        }
        else if (Type==6)
        {
            $("#SubCatId").text(obj.value);
            $("#SName").text(obj.options[obj.selectedIndex].text);

        }
    }


    function SetWithangle(angleDeg2, DiffRadius, circle1, Sprinkler) {
        //console.log("Values " + angleDeg2 + " " + DiffRadius + " " + Sprinkler.radius() + " " + circle1.x()+" " + circle1.y());
        if (angleDeg2 == 0) {
            //alert(0);
            circle1.x(Sprinkler.x() + Number(Sprinkler.radius()));
        }
        else if (angleDeg2 == 180) {
            circle1.x(Sprinkler.x() - Number(Sprinkler.radius()));

        }
        else if (angleDeg2 == 90) {
            circle1.y(Sprinkler.y() + Number(Sprinkler.radius()));
        }
            else if (angleDeg2 == 270) {
            circle1.y(Sprinkler.y() - Number(Sprinkler.radius()));

            }
        else if (angleDeg2 < 90) {
            //alert(0);
                var setx = Number(circle1.x()) + Number(DiffRadius);
                var sety = Number(circle1.y()) + Number(DiffRadius);
                circle1.x(setx);
            circle1.y(sety);
            //console.log(circle1.x());
            //console.log(circle1.y());
            }
            else if (angleDeg2 < 180) {
                var setx = Number(circle1.x()) - Number(DiffRadius);
                var sety = Number(circle1.y()) + Number(DiffRadius);
                circle1.x(setx);
                circle1.y(sety);
            }
            else if (angleDeg2 < 270) {
                var setx = Number(circle1.x()) - Number(DiffRadius);
                var sety = Number(circle1.y()) - Number(DiffRadius);
                circle1.x(setx);
                circle1.y(sety);
            }
            else if (angleDeg2 < 360) {

                var setx = Number(circle1.x()) + Number(DiffRadius);
                var sety = Number(circle1.y()) - Number(DiffRadius);
                circle1.x(setx);
                circle1.y(sety);
        }
        return 0;
    }


    document.getElementById('save').addEventListener('click', function () {
        var pdf = new jsPDF('l', 'px', [stage.width(), stage.height()+300]);
        pdf.setTextColor('#000000');
        // first add texts
        stage.find('Text').forEach((text) => {
            const size = text.fontSize() / 0.75; // convert pixels to points
            pdf.setFontSize(size);
            pdf.text(text.text(), text.x(), text.y(), {
                baseline: 'top',
                angle: -text.getAbsoluteRotation(),
            });
        });
        //return;
        // then put image on top of texts (so texts are not visible)
        pdf.addImage(
            stage.toDataURL({ pixelRatio: 2 }),
            0,
            0,
            stage.width(),
            stage.height()
        );

        var dataURL = stage.toDataURL();
        var dataURL = dataURL.replace(/^data:image\/(png|jpeg|jpg);base64,/, "");

        // Get the PDF data as a base64-encoded string

        var OrderID = $("#OrderId").val();
            $.ajax({
                type: "POST",
                url: "@Url.Action("SavePdf", "Admin")",
                data: { pdfFile: dataURL, OrderID: OrderID },
                dataType: "json",
                success: function (r) {

                }
            });




        //console.log(pdf.addImage());
        pdf.save('canvas.pdf');
        //pdf.save('D:\Test.pdf');
    });

    function getBase64Image(img) {
        var canvas = document.createElement("canvas");
        canvas.width = img.width;
        canvas.height = img.height;

        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);

        var dataURL = canvas.toDataURL("image/jpeg");

        return dataURL.replace(/^data:image\/(png|jpeg|jpg);base64,/, "");
    }


    function angle(cx, cy, ex, ey) {
        var dy = ey - cy;
        var dx = ex - cx;
        var theta = Math.atan2(dy, dx); // range (-PI, PI]
        theta *= 180 / Math.PI; // rads to degs, range (-180, 180]
        //if (theta < 0) theta = 360 + theta; // range [0, 360)
        return theta;
    }


    $("#file_input").change(function (e) {
        //var URL = window.webkitURL || window.URL;
        //var url = URL.createObjectURL(e.target.files[0]);
        //var img = new Image();
        //img.src = url;
        UnSelectObjOnNew(CurrentObjId);
        var FileName = "";

        var formData = new FormData();
        var fileInput = $("#file_input").get(0);
        var file = fileInput.files[0];
        formData.append("file", file);
        ////console.log(file);
        //formData.append("InvoiceNum",5);
        ////console.log(FormData);

        $.ajax({
            type: "POST",
            url: "@Url.Action("UploadDesignImg","Admin")",
            data: formData,
            processData: false,
            contentType: false,
            dataType: "json",
            success: function (r) {
                FileName = r;
                var Url = "/Uploading/" + FileName;
                //console.log(Url);

                Konva.Image.fromURL(
                    Url,
                    (img) => {
                        img.setAttrs({
                            x: 200,
                            y: 100,
                            width: 350,
                            height: 300,
                            id: "UploadImg",
                            name: "Uploaded Image",
                            draggable: true,
                            opacity: 1,
                        });
                        layer.add(img);
                        UndoArray.push(img.id());
                        CurrentObjId = img.id();
                        // apply default left-top crop
                        //applyCrop('center-middle');

                        const tr = new Konva.Transformer({
                            nodes: [img],
                            keepRatio: true,
                            enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right'],
                            id: "TUploadImg"
                        });

                        layer.add(tr);
                        tr.anchorCornerRadius(10);
                        tr.rotateEnabled(false);
                    }
                );



                //var imageObj = new Image();
                //imageObj.onload = function () {
                //    var yoda = new Konva.Image({
                //        x: 200,
                //        y: 100,
                //        image: imageObj,
                //        width: 350,
                //        height: 300,
                //        id:"UploadImg",
                //        draggable: true,
                //        opacity:1,
                //    });

                //    // add the shape to the layer
                //    layer.add(yoda);
                //    UndoArray.push(yoda.id());
                //};
                //////console.log(url);
                //imageObj.src = Url;
                },
            error: function (r) {
                //console.log(r);
                }
        });

        //$("#checkimg").src("/assets/images/ecommerce/ValveBox.png");
        /* $("#checkimg").attr("src", url);*/
        $("#file_input").prop('disabled', true);
        $(".DivImageOpacityValue").show();


    });

    $("body").on("change", "#ImageOpacityValue", function () {
        //alert();
        var node = layer.findOne('#UploadImg');
        //console.log(node);
        //console.log(this.value);

        node.opacity(this.value/100);
    });

    $("body").on("click", "#EndImageOpacity", function () {
        node = layer.findOne('#UploadImg');
        node.draggable(false);
         var node = layer.findOne('#TUploadImg');
         if (node != null) {
             node.hide();
         }
         $(".DivImageOpacityValue").hide();
         $("#DeleteObj").hide();
         $("#CancleDeleteObj").hide();
    });

    $("body").on("click", "#ProceedToAccesoires", function () {

        var pdf = new jsPDF('l', 'px', [stage.width(), stage.height()+300]);
        pdf.setTextColor('#000000');
        // first add texts
        stage.find('Text').forEach((text) => {
            const size = text.fontSize() / 0.75; // convert pixels to points
            pdf.setFontSize(size);
            pdf.text(text.text(), text.x(), text.y(), {
                baseline: 'top',
                angle: -text.getAbsoluteRotation(),
            });
        });
        //return;
        // then put image on top of texts (so texts are not visible)
        pdf.addImage(
            stage.toDataURL({ pixelRatio: 2 }),
            0,
            0,
            stage.width(),
            stage.height()
        );

        var dataURL = stage.toDataURL();
        var dataURL = dataURL.replace(/^data:image\/(png|jpeg|jpg);base64,/, "");

        // Get the PDF data as a base64-encoded string

        var OrderID = $("#OrderId").val();
            $.ajax({
                type: "POST",
                url: "@Url.Action("SavePdf", "Admin")",
                data: { pdfFile: dataURL, OrderID: OrderID },
                dataType: "json",
                success: function (r) {

                }
            });


        //var OrderID = $("#OrderId").val();
        var Url = '@Url.Action("AddAccesoires", "Admin")?OrderId=' + OrderID + '';
        //alert(Url);
        window.location = Url;
    });


    function SelectObj(ObjID) {

    }


    function UnSelectObjOnNew(ObjID) {
        if (OldCurrentObjId != null && OldCurrentObjId != "") {
            UnSelectObj(OldCurrentObjId);
        }
        if (ObjID != "") {
            //alert(ObjID);

            var CLastId = ObjID;
            if (CLastId == "UploadImg") {
                node = layer.findOne('#UploadImg');
                node.draggable(false);
                var node = layer.findOne('#TUploadImg');
                if (node != null) {
                    node.hide();
                }
                $(".DivImageOpacityValue").hide();
                $("#DeleteObj").hide();
                $("#CancleDeleteObj").hide();
            }

            if (CLastId[0] == 'L') {

                var temp = Number(CLastId.replace("Line", ""));
                FirstId = StartRect[temp - 1];
                LastId = FindLastId(FirstId);


                var CheckId = layer.findOne('#' + CLastId);
                for (var i = Number(FirstId.replace("Rect", "")); i <= Number(LastId.replace("Rect", "")); i++) {
                    var node = layer.findOne('#Rect' + i);
                    node.hide();
                    if (CheckId.name() == "Irrigation Wiring" && i == Number(LastId.replace("Rect", ""))) {
                        //$(".IWPD").hide();
                        var SubCategoryID = $("#SubCatId").text();
                        var SubcategoryName = $("#SName").text();
                        var UniqueId = $("#IWId").val();
                        var OrderId = $("#OrderId").val();
                        var IWLength = $("#IWL").val();

                        //$("#EndIW").hide();
                        $(".IWPD").hide();
                        $("#SName").text("");
                        $("#SubCatId").text("");
                        $("#btn_IW *").prop('disabled', true);

                        var model = {
                            UniqueId: UniqueId,
                            SubCategoryID: SubCategoryID,
                            SubcategoryName: SubcategoryName,
                            OrderId: OrderId,
                            IWLength: IWLength,
                        };

                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("AddOrderDetails", "Customer")",
                            data: JSON.stringify(model),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (r) {
                                $("#TotalAmount").text(r);
                                $("#TotalAmountInput").val(r);
                            }
                        });
                        $("#DeleteObj").hide();
                        $("#CancleDeleteObj").hide();
                        var node = layer.findOne('#' + UniqueId);
                        var SI = Number(UniqueId.replace("Line", ""));
                        var SRect = StartRect[SI-1];
                        var ERect = FindLastId(SRect);
                        var Ltext = ERect.replace("Rect", "Text");
                        var Points = node.points();
                        Points.pop();
                        Points.pop();
                        node.points(Points);
                        isDraw = false;
                        isFinished = true;
                        var node = layer.findOne('#' + Ltext);
                        node.destroy();
                        $("#EndIW").hide();

                        CurrentObjId = "";
                        //OldCurrentObjId = "";
                    }
                    else if (CheckId.name() == "PE Pipeline" && i == Number(LastId.replace("Rect", ""))) {

                        //$(".PEPD").hide();
                        var SubCategoryID = $("#SubCatId").text();
                        var SubcategoryName = $("#SName").text();
                        var UniqueId = $("#PEId").val();
                        var OrderId = $("#OrderId").val();
                        var PELength = $("#PEL").val();

                        //$("#EndPE").hide();
                        $(".PEPD").hide();
                        $("#SName").text("");
                        $("#SubCatId").text("");
                        $("#btn_PE *").prop('disabled', true);

                        var model = {
                            UniqueId: UniqueId,
                            SubCategoryID: SubCategoryID,
                            SubcategoryName: SubcategoryName,
                            OrderId: OrderId,
                            PELength: PELength,
                        };

                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("AddOrderDetails", "Customer")",
                            data: JSON.stringify(model),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (r) {
                                $("#TotalAmount").text(r);
                                $("#TotalAmountInput").val(r);
                            }
                        });
                        $("#DeleteObj").hide();
                        var node = layer.findOne('#' + UniqueId);
                        var SI = Number(UniqueId.replace("Line", ""));
                        var SRect = StartRect[SI-1];
                        var ERect = FindLastId(SRect);
                        var Ltext = ERect.replace("Rect", "Text");
                        var Points = node.points();
                        Points.pop();
                        Points.pop();
                        node.points(Points);
                        isDraw = false;
                        isFinished = true;
                        var node = layer.findOne('#' + Ltext);
                        node.destroy();
                        $("#EndPE").hide();


                        CurrentObjId = "";
                        //OldCurrentObjId = "";
                    }
                    else {
                        node = layer.findOne('#Text' + i);
                        node.hide();
                    }
                }
                $("#SName").text("");
                isOutArea = true;

            }
            else if (CLastId[0] == 'S' && CLastId[1] == 'p') {

                var SubCategoryID = $("#SubCatId").text();
                var SubcategoryName = $("#SName").text();
                var UniqueId = $("#SId").val();
                var MinAngle = $("#StartAngle").val();
                var MaxAngle = $("#SAngle").val();
                var ThrowDistanceMax = $("#SRadius").val();
                var OrderId = $("#OrderId").val();

                var node = layer.findOne('#' + UniqueId);
                if (node != null) {
                    node.hide();
                }
                var node = layer.findOne('#' + UniqueId.replace("Sprinkler", "FillCircle"));
                if (node != null) {
                    node.hide();
                }
                var node = layer.findOne('#' + UniqueId.replace("Sprinkler", "Circle"));
                if (node != null) {
                    node.hide();
                }
                var node = layer.findOne('#' + UniqueId.replace("Sprinkler", "MoveCircle"));
                if (node != null) {
                    //node.hide();
                } var node = layer.findOne('#' + UniqueId.replace("Sprinkler", "Arc"));
                if (node != null) {
                    node.strokeWidth(0.5);
                    node.stroke("black");
                    node.listening(true);
                }



                $("#BtnEndsprinkler").hide();
                $(".RSPD").hide();
                $("#SName").text("");
                CurretSprinkler = "";


                var model = {
                    UniqueId: UniqueId,
                    SubCategoryID: SubCategoryID,
                    SubcategoryName: SubcategoryName,
                    MinAngle: MinAngle,
                    MaxAngle: MaxAngle,
                    ThrowDistanceMax: ThrowDistanceMax,
                    OrderId: OrderId,
                };

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("AddOrderDetails", "Customer")",
                    data: JSON.stringify(model),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (r) {
                        $("#TotalAmount").text(r);
                        $("#TotalAmountInput").val(r);
                        SprinklerCount();
                    }
                });
                $("#DeleteObj").hide();
                $("#CancleDeleteObj").hide();

            }
            else if (CLastId[0] == 'R' && CLastId[1] == 'e') {
                SubCategoryID = $("#SubCatId").text();
                SubcategoryName = $("#SName").text();
                UniqueId = $("#SSId").val();
                OrderId = $("#OrderId").val();

                $("#BtnEndRectangularsprinkler").hide();
                $(".SSPD").hide();
                $("#SName").text("");
                CurretRSprinkler = "";


                var model = {
                    UniqueId: UniqueId,
                    SubCategoryID: SubCategoryID,
                    SubcategoryName: SubcategoryName,
                    OrderId: OrderId,
                };

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("AddOrderDetails", "Customer")",
                    data: JSON.stringify(model),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (r) {
                        $("#TotalAmount").text(r);
                        $("#TotalAmountInput").val(r);
                        SprinklerCount();
                    }
                });

                $("#DeleteObj").hide();
                $("#CancleDeleteObj").hide();

            }
            else if (CLastId[0] == 'S' && CLastId[1] == 'y') {
                SubCategoryID = $("#SubCatId").text();
                SubcategoryName = $("#SName").text();
                UniqueId = $("#ICId").val();
                OrderId = $("#OrderId").val();

                $("#EndIC").hide();
                $(".ICPD").hide();
                $("#SName").text("");
                $("#SubCatId").text("");
                //$("#btn_IC").prop("disabled", true);
                $("#btn_IC *").prop('disabled', true);


                var model = {
                    UniqueId: UniqueId,
                    SubCategoryID: SubCategoryID,
                    SubcategoryName: SubcategoryName,
                    OrderId: OrderId,
                };

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("AddOrderDetails", "Customer")",
                    data: JSON.stringify(model),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (r) {
                        $("#TotalAmount").text(r);
                        $("#TotalAmountInput").val(r);
                    }
                });
                var node = layer.findOne('#' + UniqueId);
                if (node != null) {
                    node.off('mouseover');
                    node.on('mouseover', (e) => {
                        stage.container().style.cursor = 'pointer';
                    });
                    node.draggable(false);
                }
                var node = layer.findOne('#' + UniqueId.replace("System", "TIC"));
                if (node != null) {
                    node.hide();
                }
                $("#DeleteObj").hide();
                $("#CancleDeleteObj").hide();
            }
            else if (CLastId[0] == 'V') {
                SubCategoryID = $("#SubCatId").text();
                SubcategoryName = $("#SName").text();
                UniqueId = $("#VBId").val();
                OrderId = $("#OrderId").val();

                $("#EndVB").hide();
                $(".VBPD").hide();
                $("#SName").text("");
                $("#SubCatId").text("");
                //CurretSprinkler = "";
                $("#btn_VB *").prop('disabled', true);


                var model = {
                    UniqueId: UniqueId,
                    SubCategoryID: SubCategoryID,
                    SubcategoryName: SubcategoryName,
                    OrderId: OrderId,
                };

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("AddOrderDetails", "Customer")",
                    data: JSON.stringify(model),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (r) {
                        $("#TotalAmount").text(r);
                        $("#TotalAmountInput").val(r);
                    }
                });
                var node = layer.findOne('#' + UniqueId);
                if (node != null) {
                    node.off('mouseover');
                    node.on('mouseover', (e) => {
                        stage.container().style.cursor = 'pointer';
                    });
                    node.draggable(false);
                }
                var node = layer.findOne('#' + UniqueId.replace("ValveBox", "TVB"));
                if (node != null) {
                    node.hide();
                }
                $("#DeleteObj").hide();
                $("#CancleDeleteObj").hide();
            }
            else if (CLastId[0] == 'T' && CLastId[1] == 'a') {
                SubCategoryID = $("#SubCatId").text();
                SubcategoryName = $("#SName").text();
                UniqueId = $("#TapId").val();
                OrderId = $("#OrderId").val();

                $("#EndTap").hide();
                $(".TapPD").hide();
                $("#SName").text("");
                $("#SubCatId").text("");
                $("#btn_TAP *").prop('disabled', true);

                var model = {
                    UniqueId: UniqueId,
                    SubCategoryID: SubCategoryID,
                    SubcategoryName: SubcategoryName,
                    OrderId: OrderId,
                };

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("AddOrderDetails", "Customer")",
                    data: JSON.stringify(model),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (r) {
                        $("#TotalAmount").text(r);
                        $("#TotalAmountInput").val(r);
                    }
                });

                var node = layer.findOne('#' + UniqueId);
                if (node != null) {
                    node.off('mouseover');
                    node.on('mouseover', (e) => {
                        stage.container().style.cursor = 'pointer';
                    });
                    node.draggable(false);
                }
                var node = layer.findOne('#' + UniqueId.replace("Tap", "TTap"));
                if (node != null) {
                    node.hide();
                }

                $("#DeleteObj").hide();
                $("#CancleDeleteObj").hide();
            }


            $("#DeleteObj").hide();
            $("#CancleDeleteObj").hide();
            $("#ObjUniqueId").val("");
            $("#SName").text("");
            CurrentObjId = "";
            OldCurrentObjId = "";
        }
    }


    function UnSelectObj(ObjID) {

        if (ObjID != "") {


            var CLastId = ObjID;
            if (CLastId == "UploadImg") {
                $("#SName").text("");
                $(".DivImageOpacityValue").hide();
                node = layer.findOne('#' + CLastId);
                node.draggable(false);
                node = layer.findOne('#' + CLastId.replace("UploadImg", "TUploadImg"));
                node.hide();
            }


            if (CLastId[0] == 'L') {


                var temp = Number(CLastId.replace("Line", ""));
                FirstId = StartRect[temp - 1];
                LastId = FindLastId(FirstId);


                var CheckId = layer.findOne('#' + CLastId);
                for (var i = Number(FirstId.replace("Rect", "")); i <= Number(LastId.replace("Rect", "")); i++) {
                    var node = layer.findOne('#Rect' + i);
                    node.hide();
                    if (CheckId.name() == "Irrigation Wiring" && i == Number(LastId.replace("Rect", ""))) {
                        $(".IWPD").hide();
                    }
                    else if (CheckId.name() == "PE Pipeline" && i == Number(LastId.replace("Rect", ""))) {

                        $(".PEPD").hide();
                    }
                    else {
                        node = layer.findOne('#Text' + i);
                        node.hide();
                    }
                }
                $("#SName").text("");
                isOutArea = true;
                CurrentObjId = "";

            }
            else if (CLastId[0] == 'S' && CLastId[1] == 'p') {

                if (CurretSprinkler != "") {
                    CurretSprinkler = "";
                }

                var node = layer.findOne('#' + CLastId);
                if (node != null) {
                    node.hide();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "FillCircle"));
                if (node != null) {
                    node.hide();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "Circle"));
                if (node != null) {
                    node.hide();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "MoveCircle"));
                if (node != null) {
                    //node.hide();
                }
                var node = layer.findOne('#' + CLastId.replace("Sprinkler", "Arc"));
                if (node != null) {
                    node.strokeWidth(0.5);
                    node.stroke("black");
                    node.listening(true);
                }


                $("#SName").text("");
                $(".RSPD").hide();

            }
            else if (CLastId[0] == 'R' && CLastId[1] == 'e') {
                if (CurretRSprinkler != "") {
                    CurretRSprinkler = "";
                }
                $("#SName").text("");
                $(".SSPD").hide();

            }
            else if (CLastId[0] == 'S' && CLastId[1] == 'y') {
                if (CurretIC != "") {
                    CurretIC = "";
                }
                $("#SName").text("");
                $(".ICPD").hide();
                node = layer.findOne('#' + CLastId);
                node.off('mouseover');
                node.on('mouseover', (e) => {
                    stage.container().style.cursor = 'pointer';
                });
                node.draggable(false);
                node = layer.findOne('#' + CLastId.replace("System", "TIC"));
                node.hide();
            }
            else if (CLastId[0] == 'V') {
                if (CurretVB != "") {
                    CurretVB = "";
                }
                $("#SName").text("");
                $(".VBPD").hide();
                node = layer.findOne('#' + CLastId);
                node.off('mouseover');
                node.on('mouseover', (e) => {
                    stage.container().style.cursor = 'pointer';
                });
                node.draggable(false);
                node = layer.findOne('#' + CLastId.replace("ValveBox", "TVB"));
                node.hide();
            }
            else if (CLastId[0] == 'T' && CLastId[1] == 'a') {
                if (CurretTap != "") {
                    CurretTap = "";
                }
                $("#SName").text("");
                $(".TapPD").hide();
                node = layer.findOne('#' + CLastId);
                node.off('mouseover');
                node.on('mouseover', (e) => {
                    stage.container().style.cursor = 'pointer';
                });
                node.draggable(false);
                node = layer.findOne('#' + CLastId.replace("Tap", "TTap"));
                node.hide();
            }
            var node = layer.findOne('#' + CLastId);
            if (node.name() == "Area") {
                $("#Area").prop('disabled', true);
            }

            $("#DeleteObj").hide();
            $("#CancleDeleteObj").hide();
            $("#ObjUniqueId").val("");
            $("#SName").text("");

            OldCurrentObjId = "";
        }
    }


    function SprinklerCount() {

        var OrderId = $("#OrderId").val();

            var model = {
                OrderId: OrderId,
            };

            $.ajax({
                type: "POST",
                url: "@Url.Action("SprinklerCount", "Customer")",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    console.log(r);
                    $("#SprinklerCount").val(r);
                }
            });

    }

    $(document).ready(function () {

        $(".nav1 li").removeClass("active");
        $('#DrawShape').addClass('active');

    });
</script>